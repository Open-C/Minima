/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MinimaInterface extends utils.Interface {
  contractName: "Minima";
  functions: {
    "addDex(address,string)": FunctionFragment;
    "addToken(address)": FunctionFragment;
    "fillBoard(uint256)": FunctionFragment;
    "getBestExchange(address,address,uint256)": FunctionFragment;
    "getExpectedOut(address,address,uint256)": FunctionFragment;
    "getFees()": FunctionFragment;
    "getPathFromBoard(uint256,uint256,int256[][],address[][],int256[],uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "swap(address[],address[],uint256,uint256,address)": FunctionFragment;
    "swapOnChain(address,address,uint256,uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFee(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addDex",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "addToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fillBoard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestExchange",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedOut",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPathFromBoard",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[][],
      string[][],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string[], string[], BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOnChain",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addDex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillBoard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBestExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPathFromBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapOnChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;

  events: {
    "DexAdded(address,string)": EventFragment;
    "FeeUpdated(address,uint256,uint256)": EventFragment;
    "FeesClaimed(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Swap(address,address,uint256,uint256)": EventFragment;
    "TokenAdded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DexAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
}

export type DexAddedEvent = TypedEvent<
  [string, string],
  { dex: string; name: string }
>;

export type DexAddedEventFilter = TypedEventFilter<DexAddedEvent>;

export type FeeUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { owner: string; oldFee: BigNumber; newFee: BigNumber }
>;

export type FeeUpdatedEventFilter = TypedEventFilter<FeeUpdatedEvent>;

export type FeesClaimedEvent = TypedEvent<[string], { owner: string }>;

export type FeesClaimedEventFilter = TypedEventFilter<FeesClaimedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    tokenFrom: string;
    tokenTo: string;
    amountIn: BigNumber;
    amountOut: BigNumber;
  }
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export type TokenAddedEvent = TypedEvent<[string], { token: string }>;

export type TokenAddedEventFilter = TypedEventFilter<TokenAddedEvent>;

export interface Minima extends BaseContract {
  contractName: "Minima";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MinimaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDex(
      dexAddress: string,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToken(
      newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillBoard(
      tokenFromIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[][], string[][], BigNumber[], BigNumber[], boolean] & {
        exchangeRates: BigNumber[][];
        exchanges: string[][];
        pathTo: BigNumber[];
        parents: BigNumber[];
        arbExists: boolean;
      }
    >;

    getBestExchange(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { rate: BigNumber; exchange: string }>;

    getExpectedOut(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[], string[]] & {
        amountOut: BigNumber;
        tokenPath: string[];
        exchangePath: string[];
      }
    >;

    getFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPathFromBoard(
      tokenFromIndex: BigNumberish,
      tokenOutIndex: BigNumberish,
      exchangeRates: BigNumberish[][],
      exchanges: string[][],
      pathTo: BigNumberish[],
      parents: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { tokenPath: string[]; exchangePath: string[] }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      tokenPath: string[],
      exchangePath: string[],
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapOnChain(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addDex(
    dexAddress: string,
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToken(
    newToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillBoard(
    tokenFromIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[][], string[][], BigNumber[], BigNumber[], boolean] & {
      exchangeRates: BigNumber[][];
      exchanges: string[][];
      pathTo: BigNumber[];
      parents: BigNumber[];
      arbExists: boolean;
    }
  >;

  getBestExchange(
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { rate: BigNumber; exchange: string }>;

  getExpectedOut(
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string[], string[]] & {
      amountOut: BigNumber;
      tokenPath: string[];
      exchangePath: string[];
    }
  >;

  getFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPathFromBoard(
    tokenFromIndex: BigNumberish,
    tokenOutIndex: BigNumberish,
    exchangeRates: BigNumberish[][],
    exchanges: string[][],
    pathTo: BigNumberish[],
    parents: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [string[], string[]] & { tokenPath: string[]; exchangePath: string[] }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    tokenPath: string[],
    exchangePath: string[],
    amountIn: BigNumberish,
    minAmountOut: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapOnChain(
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    minAmountOut: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDex(
      dexAddress: string,
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(newToken: string, overrides?: CallOverrides): Promise<void>;

    fillBoard(
      tokenFromIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[][], string[][], BigNumber[], BigNumber[], boolean] & {
        exchangeRates: BigNumber[][];
        exchanges: string[][];
        pathTo: BigNumber[];
        parents: BigNumber[];
        arbExists: boolean;
      }
    >;

    getBestExchange(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { rate: BigNumber; exchange: string }>;

    getExpectedOut(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[], string[]] & {
        amountOut: BigNumber;
        tokenPath: string[];
        exchangePath: string[];
      }
    >;

    getFees(overrides?: CallOverrides): Promise<void>;

    getPathFromBoard(
      tokenFromIndex: BigNumberish,
      tokenOutIndex: BigNumberish,
      exchangeRates: BigNumberish[][],
      exchanges: string[][],
      pathTo: BigNumberish[],
      parents: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { tokenPath: string[]; exchangePath: string[] }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    swap(
      tokenPath: string[],
      exchangePath: string[],
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOnChain(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DexAdded(address,string)"(dex?: null, name?: null): DexAddedEventFilter;
    DexAdded(dex?: null, name?: null): DexAddedEventFilter;

    "FeeUpdated(address,uint256,uint256)"(
      owner?: null,
      oldFee?: null,
      newFee?: null
    ): FeeUpdatedEventFilter;
    FeeUpdated(
      owner?: null,
      oldFee?: null,
      newFee?: null
    ): FeeUpdatedEventFilter;

    "FeesClaimed(address)"(owner?: null): FeesClaimedEventFilter;
    FeesClaimed(owner?: null): FeesClaimedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Swap(address,address,uint256,uint256)"(
      tokenFrom?: null,
      tokenTo?: null,
      amountIn?: null,
      amountOut?: null
    ): SwapEventFilter;
    Swap(
      tokenFrom?: null,
      tokenTo?: null,
      amountIn?: null,
      amountOut?: null
    ): SwapEventFilter;

    "TokenAdded(address)"(token?: null): TokenAddedEventFilter;
    TokenAdded(token?: null): TokenAddedEventFilter;
  };

  estimateGas: {
    addDex(
      dexAddress: string,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToken(
      newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillBoard(
      tokenFromIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBestExchange(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpectedOut(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPathFromBoard(
      tokenFromIndex: BigNumberish,
      tokenOutIndex: BigNumberish,
      exchangeRates: BigNumberish[][],
      exchanges: string[][],
      pathTo: BigNumberish[],
      parents: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      tokenPath: string[],
      exchangePath: string[],
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapOnChain(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDex(
      dexAddress: string,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillBoard(
      tokenFromIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBestExchange(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpectedOut(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPathFromBoard(
      tokenFromIndex: BigNumberish,
      tokenOutIndex: BigNumberish,
      exchangeRates: BigNumberish[][],
      exchanges: string[][],
      pathTo: BigNumberish[],
      parents: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      tokenPath: string[],
      exchangePath: string[],
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapOnChain(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
