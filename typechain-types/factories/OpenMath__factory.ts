/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { OpenMath, OpenMathInterface } from "../OpenMath";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "exchangeRate",
    outputs: [
      {
        internalType: "int256",
        name: "exchange",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "unsigned",
        type: "uint256",
      },
    ],
    name: "safeUnsignedToSigned",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61039961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80633bfb3c6914610045578063ed7248041461006e575b600080fd5b61005861005336600461012a565b610081565b6040516100659190610163565b60405180910390f35b61005861007c366004610142565b6100e9565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82106100e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100dc9061016c565b60405180910390fd5b5090565b6000806100f584610081565b9050600061010284610081565b905080610117670de0b6b3a76400008461027c565b61012191906101ef565b95945050505050565b60006020828403121561013b578081fd5b5035919050565b60008060408385031215610154578081fd5b50508035926020909101359150565b90815260200190565b6020808252604a908201527f556e7369676e656420696e746567657220697320746f6f206c617267652c206360408201527f6f6e76657273696f6e2077696c6c20726573756c7420696e2061206e6567617460608201527f697665206e756d62657200000000000000000000000000000000000000000000608082015260a00190565b600082610223577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f80000000000000000000000000000000000000000000000000000000000000008314161561027757610277610334565b500590565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818413828413858304851182821616156102bb576102bb610334565b7f8000000000000000000000000000000000000000000000000000000000000000848712868205881281841616156102f5576102f5610334565b85871292508782058712848416161561031057610310610334565b8785058712818416161561032657610326610334565b505050929093029392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220bf7e1f53d3c13e3237052c2782eb23f9a34aa42e33cf5a6bf4e5e0aa542b08c864736f6c63430008000033";

type OpenMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OpenMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OpenMath__factory extends ContractFactory {
  constructor(...args: OpenMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "OpenMath";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OpenMath> {
    return super.deploy(overrides || {}) as Promise<OpenMath>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OpenMath {
    return super.attach(address) as OpenMath;
  }
  connect(signer: Signer): OpenMath__factory {
    return super.connect(signer) as OpenMath__factory;
  }
  static readonly contractName: "OpenMath";
  public readonly contractName: "OpenMath";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OpenMathInterface {
    return new utils.Interface(_abi) as OpenMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OpenMath {
    return new Contract(address, _abi, signerOrProvider) as OpenMath;
  }
}
