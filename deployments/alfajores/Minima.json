{
  "address": "0xa62b7d3A6401BB42203eDE86b6ADde92fbF3dD7E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dex",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "DexAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "FeesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dexAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "addDex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenFromIndex",
          "type": "uint256"
        }
      ],
      "name": "fillBoard",
      "outputs": [
        {
          "internalType": "int256[][]",
          "name": "exchangeRates",
          "type": "int256[][]"
        },
        {
          "internalType": "address[][]",
          "name": "exchanges",
          "type": "address[][]"
        },
        {
          "internalType": "int256[]",
          "name": "pathTo",
          "type": "int256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "parents",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "arbExists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getBestExchange",
      "outputs": [
        {
          "internalType": "int256",
          "name": "rate",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "exchange",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getExpectedOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "exchangePath",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenFromIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenOutIndex",
          "type": "uint256"
        },
        {
          "internalType": "int256[][]",
          "name": "exchangeRates",
          "type": "int256[][]"
        },
        {
          "internalType": "address[][]",
          "name": "exchanges",
          "type": "address[][]"
        },
        {
          "internalType": "int256[]",
          "name": "pathTo",
          "type": "int256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "parents",
          "type": "uint256[]"
        }
      ],
      "name": "getPathFromBoard",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "exchangePath",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "exchangePath",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "swapOnChain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "updateFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x865d2b107fdc83f9c36096050a93b2f772012d93d23a4d6652c0221a66705b7c",
  "receipt": {
    "to": null,
    "from": "0xf73d7f5A890a131f12E4fB03E50277c49748Cf5E",
    "contractAddress": "0xa62b7d3A6401BB42203eDE86b6ADde92fbF3dD7E",
    "transactionIndex": 4,
    "gasUsed": "2669161",
    "logsBloom": "0x
    "blockHash": "0x711d718dcb21ea03fb6813649a1446ee9845bfa0c50ce42e4d3a3f070947067f",
    "transactionHash": "0x865d2b107fdc83f9c36096050a93b2f772012d93d23a4d6652c0221a66705b7c",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 8263734,
        "transactionHash": "0x865d2b107fdc83f9c36096050a93b2f772012d93d23a4d6652c0221a66705b7c",
        "address": "0xa62b7d3A6401BB42203eDE86b6ADde92fbF3dD7E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f73d7f5a890a131f12e4fb03e50277c49748cf5e"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x711d718dcb21ea03fb6813649a1446ee9845bfa0c50ce42e4d3a3f070947067f"
      }
    ],
    "blockNumber": 8263734,
    "cumulativeGasUsed": "3245263",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "012008fbf0d13dacd607bc58cc486cfe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"DexAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dexAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenFromIndex\",\"type\":\"uint256\"}],\"name\":\"fillBoard\",\"outputs\":[{\"internalType\":\"int256[][]\",\"name\":\"exchangeRates\",\"type\":\"int256[][]\"},{\"internalType\":\"address[][]\",\"name\":\"exchanges\",\"type\":\"address[][]\"},{\"internalType\":\"int256[]\",\"name\":\"pathTo\",\"type\":\"int256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"parents\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"arbExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getBestExchange\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"rate\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getExpectedOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"exchangePath\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenFromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256[][]\",\"name\":\"exchangeRates\",\"type\":\"int256[][]\"},{\"internalType\":\"address[][]\",\"name\":\"exchanges\",\"type\":\"address[][]\"},{\"internalType\":\"int256[]\",\"name\":\"pathTo\",\"type\":\"int256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"parents\",\"type\":\"uint256[]\"}],\"name\":\"getPathFromBoard\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"exchangePath\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"exchangePath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swapOnChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Minima.sol\":\"Minima\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/AMMs/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IWrapper {\\n  // function getQuotes(address tokenIn, uint256 amountIn)\\n  //   external\\n  //   view\\n  //   returns (uint256[] memory expectedOut, address[] memory tokensOut);\\n\\n  function getQuote(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) external view returns (uint256);\\n\\n  function swap(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minAmountOut\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xe28ad8a2e64da6b69dd248a3eeff8544af45bf910ad0d3d0a1e53318a9389e17\",\"license\":\"ISC\"},\"contracts/Minima.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AMMs/IWrapper.sol\\\";\\nimport \\\"./OpenMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Minima is Ownable {\\n  using OpenMath for *;\\n  address[] dexs;\\n  address[] supportedTokens;\\n  mapping(address => bool) dexKnown;\\n  uint256 numTokens;\\n  uint256 fee = 5 * (10**7);\\n  uint256 FEE_DENOM = 10**10;\\n\\n  event FeeUpdated(address owner, uint256 oldFee, uint256 newFee);\\n  event FeesClaimed(address owner);\\n  event TokenAdded(address token);\\n  event DexAdded(address dex, string name);\\n  event Swap(\\n    address tokenFrom,\\n    address tokenTo,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  function addDex(address dexAddress, string calldata name) external onlyOwner {\\n    require(!dexKnown[dexAddress], \\\"DEX has alread been added\\\");\\n    dexKnown[dexAddress] = true;\\n    dexs.push(dexAddress);\\n    emit DexAdded(dexAddress, name);\\n  }\\n\\n  function addToken(address newToken) external onlyOwner {\\n    for (uint256 i = 0; i < supportedTokens.length; i++) {\\n      require(supportedTokens[i] != newToken, \\\"Token already added\\\");\\n    }\\n    supportedTokens.push(newToken);\\n    numTokens++;\\n    emit TokenAdded(newToken);\\n  }\\n\\n  function updateFee(uint256 _fee) external onlyOwner {\\n    emit FeeUpdated(owner(), fee, _fee);\\n    fee = _fee;\\n  }\\n\\n  function getFees() external onlyOwner {\\n    for (uint256 i = 0; i < numTokens; i++) {\\n      IERC20 token = IERC20(supportedTokens[i]);\\n      token.transfer(owner(), token.balanceOf(address(this)));\\n    }\\n    emit FeesClaimed(owner());\\n  }\\n\\n  function getBestExchange(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) public view returns (int256 rate, address exchange) {\\n    uint256 amountOut = 0;\\n    for (uint256 i = 0; i < dexs.length; i++) {\\n      uint256 quote = IWrapper(dexs[i]).getQuote(tokenIn, tokenOut, amountIn);\\n      if (quote > amountOut) {\\n        amountOut = quote;\\n        exchange = dexs[i];\\n      }\\n    }\\n    rate = OpenMath.exchangeRate(amountIn, amountOut);\\n  }\\n\\n  function getTokenIndex(address token) internal view returns (uint256) {\\n    for (uint256 i = 0; i < numTokens; i++) {\\n      if (address(supportedTokens[i]) == token) {\\n        return i;\\n      }\\n    }\\n    revert(\\\"Token is not supported\\\");\\n  }\\n\\n  function getExpectedOutFromPath(\\n    address[] memory tokenPath,\\n    address[] memory exchangePath,\\n    uint256 amountIn\\n  ) internal view returns (uint256 expectedOut) {\\n    require(tokenPath.length > 1, \\\"Path must contain atleast two tokens\\\");\\n    require(\\n      exchangePath.length == tokenPath.length - 1,\\n      \\\"Exchange path incorrect length\\\"\\n    );\\n\\n    expectedOut = amountIn;\\n    for (uint256 i = 0; i < exchangePath.length; i++) {\\n      expectedOut = IWrapper(exchangePath[i]).getQuote(\\n        tokenPath[i],\\n        tokenPath[i + 1],\\n        expectedOut\\n      );\\n    }\\n  }\\n\\n  function getExpectedOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 amountOut,\\n      address[] memory tokenPath,\\n      address[] memory exchangePath\\n    )\\n  {\\n    uint256 tokenFromIndex = getTokenIndex(tokenIn);\\n    uint256 tokenOutIndex = getTokenIndex(tokenOut);\\n\\n    (\\n      int256[][] memory exchangeRates,\\n      address[][] memory exchanges,\\n      int256[] memory pathTo,\\n      uint256[] memory parents,\\n      bool arbExists\\n    ) = fillBoard(tokenFromIndex);\\n\\n    (\\n      address[] memory tokenPath,\\n      address[] memory exchangePath\\n    ) = getPathFromBoard(\\n        tokenFromIndex,\\n        tokenOutIndex,\\n        exchangeRates,\\n        exchanges,\\n        pathTo,\\n        parents\\n      );\\n    amountOut = getExpectedOutFromPath(tokenPath, exchangePath, amountIn);\\n  }\\n\\n  function fillBoard(uint256 tokenFromIndex)\\n    public\\n    view\\n    returns (\\n      int256[][] memory exchangeRates,\\n      address[][] memory exchanges,\\n      int256[] memory pathTo,\\n      uint256[] memory parents,\\n      bool arbExists\\n    )\\n  {\\n    exchangeRates = new int256[][](numTokens);\\n    exchanges = new address[][](numTokens);\\n    pathTo = new int256[](numTokens);\\n    parents = new uint256[](numTokens);\\n\\n    for (uint256 i = 0; i < numTokens; i++) {\\n      pathTo[i] = OpenMath.MAX_INT;\\n      exchangeRates[i] = new int256[](numTokens);\\n      exchanges[i] = new address[](numTokens);\\n      if (i == tokenFromIndex) {\\n        pathTo[i] = 0;\\n      }\\n      for (uint256 i = 0; i < numTokens; i++) {\\n        ERC20 tokenIn = ERC20(supportedTokens[i]);\\n        for (uint256 j = 0; j < numTokens; j++) {\\n          (int256 rate, address exchange) = getBestExchange(\\n            address(tokenIn),\\n            supportedTokens[j],\\n            10**tokenIn.decimals()\\n          );\\n          exchanges[i][j] = exchange;\\n          exchangeRates[i][j] = OpenMath.log2(-1 * rate);\\n        }\\n      }\\n    }\\n\\n    {\\n      bool improved = true;\\n      uint256 iteration = 0;\\n      while (iteration < numTokens && improved) {\\n        improved = false;\\n        iteration++;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n          int256 curCost = pathTo[i];\\n          for (uint256 j = 0; j < numTokens; j++) {\\n            if (curCost + exchangeRates[i][j] < pathTo[j]) {\\n              pathTo[j] = curCost + exchangeRates[i][j];\\n              improved = true;\\n              parents[j] = i;\\n            }\\n          }\\n        }\\n        if (iteration == numTokens) {\\n          arbExists = improved;\\n        }\\n      }\\n    }\\n  }\\n\\n  function getPathFromBoard(\\n    uint256 tokenFromIndex,\\n    uint256 tokenOutIndex,\\n    int256[][] memory exchangeRates,\\n    address[][] memory exchanges,\\n    int256[] memory pathTo,\\n    uint256[] memory parents\\n  )\\n    public\\n    view\\n    returns (address[] memory tokenPath, address[] memory exchangePath)\\n  {\\n    tokenPath = new address[](numTokens);\\n    exchangePath = new address[](numTokens);\\n    uint256 curIndex = tokenOutIndex;\\n    uint256 iterations = 0;\\n\\n    while (curIndex != tokenFromIndex) {\\n      require(iterations < numTokens, \\\"No path exists\\\");\\n      uint256 parent = parents[curIndex];\\n      tokenPath[iterations] = supportedTokens[curIndex];\\n      exchangePath[iterations++] = exchanges[parent][curIndex];\\n      curIndex = parent;\\n    }\\n    tokenPath[iterations++] = supportedTokens[tokenFromIndex];\\n    for (uint256 i = 0; i <= iterations / 2; i++) {\\n      address tmp = tokenPath[i];\\n      tokenPath[i] = tokenPath[tokenPath.length - i];\\n      tokenPath[tokenPath.length - i] = tmp;\\n      if (i <= exchangePath.length / 2) {\\n        tmp = exchangePath[i];\\n        exchangePath[i] = exchangePath[exchangePath.length - i];\\n        exchangePath[exchangePath.length - i] = tmp;\\n      }\\n    }\\n  }\\n\\n  function swap(\\n    address[] memory tokenPath,\\n    address[] memory exchangePath,\\n    uint256 amountIn,\\n    uint256 minAmountOut,\\n    address recipient\\n  ) public returns (uint256 actualAmountOut) {\\n    require(tokenPath.length > 1, \\\"Path must contain atleast two tokens\\\");\\n    require(\\n      exchangePath.length == tokenPath.length - 1,\\n      \\\"Exchange path incorrect length\\\"\\n    );\\n    IERC20 inputToken = IERC20(tokenPath[0]);\\n    require(\\n      inputToken.transferFrom(msg.sender, address(this), amountIn),\\n      \\\"Transfer failed\\\"\\n    );\\n    actualAmountOut = amountIn;\\n    for (uint256 i = 0; i < exchangePath.length; i++) {\\n      inputToken = IERC20(tokenPath[i]);\\n      IERC20 outToken = IERC20(tokenPath[i + 1]);\\n      uint256 startingBalance = outToken.balanceOf(address(this));\\n      address exchange = exchangePath[i];\\n      require(inputToken.approve(exchange, actualAmountOut), \\\"Approval failed\\\");\\n\\n      IWrapper(exchange).swap(\\n        address(inputToken),\\n        address(outToken),\\n        actualAmountOut,\\n        0\\n      );\\n      actualAmountOut = outToken.balanceOf(address(this)) - startingBalance;\\n    }\\n    uint256 swapFee = (actualAmountOut * fee) / FEE_DENOM;\\n    actualAmountOut -= swapFee;\\n\\n    require(actualAmountOut >= minAmountOut, \\\"Slippage was too high\\\");\\n    IERC20(tokenPath[tokenPath.length - 1]).transfer(\\n      recipient,\\n      actualAmountOut\\n    );\\n    emit Swap(\\n      tokenPath[0],\\n      tokenPath[tokenPath.length - 1],\\n      amountIn,\\n      actualAmountOut\\n    );\\n  }\\n\\n  function swapOnChain(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minAmountOut,\\n    address recipient\\n  ) external returns (uint256) {\\n    uint256 tokenFromIndex = getTokenIndex(tokenIn);\\n    uint256 tokenOutIndex = getTokenIndex(tokenOut);\\n\\n    (\\n      int256[][] memory exchangeRates,\\n      address[][] memory exchanges,\\n      int256[] memory pathTo,\\n      uint256[] memory parents,\\n\\n    ) = fillBoard(tokenFromIndex);\\n\\n    (\\n      address[] memory tokenPath,\\n      address[] memory exchangePath\\n    ) = getPathFromBoard(\\n        tokenFromIndex,\\n        tokenOutIndex,\\n        exchangeRates,\\n        exchanges,\\n        pathTo,\\n        parents\\n      );\\n    return swap(tokenPath, exchangePath, amountIn, minAmountOut, recipient);\\n  }\\n}\\n\",\"keccak256\":\"0xb0e85448bd3e5189eab7ae03a27e1e1e48175f7e031d8731ac47b0c0c5430278\",\"license\":\"ISC\"},\"contracts/OpenMath.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nlibrary OpenMath {\\n  uint256 constant MAX_UINT = 2**256 - 1;\\n  uint256 constant DECIMALS_UINT = 10**18;\\n  int256 constant DECIMALS_SIGNED = 10**18;\\n  int256 constant MAX_INT = 2**255 - 1;\\n  uint256 internal constant HALF_SCALE = 5e17;\\n\\n  /// @dev How many trailing decimals can be represented.\\n  int256 internal constant SCALE = 1e18;\\n\\n  /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n  /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n  /// @param x The uint256 number for which to find the index of the most significant bit.\\n  /// @return msb The index of the most significant bit as an uint256.\\n  function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n    if (x >= 2**128) {\\n      x >>= 128;\\n      msb += 128;\\n    }\\n    if (x >= 2**64) {\\n      x >>= 64;\\n      msb += 64;\\n    }\\n    if (x >= 2**32) {\\n      x >>= 32;\\n      msb += 32;\\n    }\\n    if (x >= 2**16) {\\n      x >>= 16;\\n      msb += 16;\\n    }\\n    if (x >= 2**8) {\\n      x >>= 8;\\n      msb += 8;\\n    }\\n    if (x >= 2**4) {\\n      x >>= 4;\\n      msb += 4;\\n    }\\n    if (x >= 2**2) {\\n      x >>= 2;\\n      msb += 2;\\n    }\\n    if (x >= 2**1) {\\n      // No need to shift x any more.\\n      msb += 1;\\n    }\\n  }\\n\\n  /// @notice Calculates the binary logarithm of x.\\n  ///\\n  /// @dev Based on the iterative approximation algorithm.\\n  /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n  ///\\n  /// Requirements:\\n  /// - x must be greater than zero.\\n  ///\\n  /// Caveats:\\n  /// - The results are nor perfectly accurate to the last digit, due to the lossy precision of the iterative approximation.\\n  ///\\n  /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n  /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n  function log2(int256 x) internal pure returns (int256 result) {\\n    require(x > 0);\\n    unchecked {\\n      // This works because log2(x) = -log2(1/x).\\n      int256 sign;\\n      if (x >= SCALE) {\\n        sign = 1;\\n      } else {\\n        sign = -1;\\n        // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n        assembly {\\n          x := div(1000000000000000000000000000000000000, x)\\n        }\\n      }\\n\\n      // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n      uint256 n = mostSignificantBit(uint256(x / SCALE));\\n\\n      // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n      // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n      result = int256(n) * SCALE;\\n\\n      // This is y = x * 2^(-n).\\n      int256 y = x >> n;\\n\\n      // If y = 1, the fractional part is zero.\\n      if (y == SCALE) {\\n        return result * sign;\\n      }\\n\\n      // Calculate the fractional part via the iterative approximation.\\n      // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n      for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n        y = (y * y) / SCALE;\\n\\n        // Is y^2 > 2 and so in the range [2,4)?\\n        if (y >= 2 * SCALE) {\\n          // Add the 2^(-m) factor to the logarithm.\\n          result += delta;\\n\\n          // Corresponds to z/2 on Wikipedia.\\n          y >>= 1;\\n        }\\n      }\\n      result *= sign;\\n    }\\n  }\\n\\n  function safeUnsignedToSigned(uint256 unsigned) public pure returns (int256) {\\n    require(\\n      unsigned < uint256(2**256 - 1),\\n      \\\"Unsigned integer is too large, conversion will result in a negative number\\\"\\n    );\\n    return int256(unsigned);\\n  }\\n\\n  // Returns exchange rate as a 59.18 decimal integer\\n  function exchangeRate(uint256 amountIn, uint256 amountOut)\\n    public\\n    pure\\n    returns (int256 exchange)\\n  {\\n    int256 numerator = safeUnsignedToSigned(amountIn);\\n    int256 denominator = safeUnsignedToSigned(amountOut);\\n\\n    exchange = (numerator * DECIMALS_SIGNED) / denominator;\\n  }\\n}\\n\",\"keccak256\":\"0x59d379d7be6ea6cf63056768177131f74f06b370777bd684c47dfb82fea75fa3\",\"license\":\"ISC\"}},\"version\":1}",
  "bytecode": "0x60806040526302faf0806005556402540be4006006553480156200002257600080fd5b5062000037620000316200003d565b62000041565b62000091565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612e4580620000a16000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806372799c0c1161008c5780639012c4a8116100665780639012c4a8146101da578063d48bfca7146101ed578063db8d55f114610200578063f2fde38b14610208576100df565b806372799c0c146101915780638da5cb5b146101a45780638e811893146101b9576100df565b8063619a0d62116100bd578063619a0d62146101445780636e9105e414610168578063715018a614610189576100df565b8063089941cf146100e457806308d1aa631461010f5780635ed8bda514610124575b600080fd5b6100f76100f236600461225a565b61021b565b60405161010693929190612a90565b60405180910390f35b61012261011d3660046122eb565b610289565b005b610137610132366004612295565b6103e5565b6040516101069190612a87565b61015761015236600461241a565b61044c565b6040516101069594939291906126fe565b61017b61017636600461225a565b610b5a565b6040516101069291906127c9565b610122610d3b565b61013761019f366004612369565b610d86565b6101ac611357565b60405161010691906125d8565b6101cc6101c7366004612432565b611366565b6040516101069291906126d0565b6101226101e836600461241a565b611827565b6101226101fb366004612239565b6118af565b610122611a1b565b610122610216366004612239565b611c09565b6000606080600061022b87611c7a565b9050600061023887611c7a565b9050600080600080600061024b8761044c565b94509450945094509450600080610266898989898989611366565b9150915061027582828f611d05565b9b5050505050505050505093509350939050565b610291611e80565b6001600160a01b03166102a2611357565b6001600160a01b0316146102d15760405162461bcd60e51b81526004016102c890612987565b60405180910390fd5b6001600160a01b03831660009081526003602052604090205460ff161561030a5760405162461bcd60e51b81526004016102c890612919565b6001600160a01b03831660008181526003602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558054808201825592527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690910180547fffffffffffffffffffffffff000000000000000000000000000000000000000016909217909155517f7b1869d3ff2bcab15b83cbc59ad58cfce8f9cbd573b3c6c58cc888fea1c39f93906103d890859085908590612639565b60405180910390a1505050565b6000806103f187611c7a565b905060006103fe87611c7a565b905060008060008061040f8661044c565b509350935093509350600080610429888888888888611366565b9150915061043a82828e8e8e610d86565b9e9d5050505050505050505050505050565b606080606080600060045467ffffffffffffffff81111561047d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156104b057816020015b606081526020019060019003908161049b5790505b50945060045467ffffffffffffffff8111156104dc57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561050f57816020015b60608152602001906001900390816104fa5790505b50935060045467ffffffffffffffff81111561053b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610564578160200160208202803683370190505b50925060045467ffffffffffffffff81111561059057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156105b9578160200160208202803683370190505b50915060005b600454811015610964577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84828151811061060a57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060045467ffffffffffffffff81111561063f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610668578160200160208202803683370190505b5086828151811061068957634e487b7160e01b600052603260045260246000fd5b602002602001018190525060045467ffffffffffffffff8111156106bd57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106e6578160200160208202803683370190505b5085828151811061070757634e487b7160e01b600052603260045260246000fd5b60200260200101819052508681141561074957600084828151811061073c57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b60005b6004548110156109515760006002828154811061077957634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b031691505b60045481101561093c5760008061085c84600285815481106107c257634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561081957600080fd5b505afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085191906124ec565b61017690600a612c09565b91509150808a868151811061088157634e487b7160e01b600052603260045260246000fd5b602002602001015184815181106108a857634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101526108d46108cf83600019612cda565b611e84565b8b86815181106108f457634e487b7160e01b600052603260045260246000fd5b6020026020010151848151811061091b57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505050808061093490612dc8565b915050610790565b5050808061094990612dc8565b91505061074c565b508061095c81612dc8565b9150506105bf565b50600160005b600454811080156109785750815b15610b4f57600091508061098b81612dc8565b91505060005b600454811015610b3b5760008682815181106109bd57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060005b600454811015610b26578781815181106109f457634e487b7160e01b600052603260045260246000fd5b60200260200101518a8481518110610a1c57634e487b7160e01b600052603260045260246000fd5b60200260200101518281518110610a4357634e487b7160e01b600052603260045260246000fd5b602002602001015183610a569190612b17565b1215610b1457898381518110610a7c57634e487b7160e01b600052603260045260246000fd5b60200260200101518181518110610aa357634e487b7160e01b600052603260045260246000fd5b602002602001015182610ab69190612b17565b888281518110610ad657634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506001945082878281518110610b0757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b80610b1e81612dc8565b9150506109ca565b50508080610b3390612dc8565b915050610991565b50600454811415610b4a578192505b61096a565b505091939590929450565b6000806000805b600154811015610c8d57600060018281548110610b8e57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517fc515ee230000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c515ee2390610be4908b908b908b906004016125ec565b60206040518083038186803b158015610bfc57600080fd5b505afa158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190612402565b905082811115610c7a5780925060018281548110610c6257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031693505b5080610c8581612dc8565b915050610b61565b506040517fed724804000000000000000000000000000000000000000000000000000000008152738D8D982DFC974A9F81F68DCfA1E42be5406738779063ed72480490610ce09087908590600401612abb565b60206040518083038186803b158015610cf857600080fd5b505af4158015610d0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d309190612402565b925050935093915050565b610d43611e80565b6001600160a01b0316610d54611357565b6001600160a01b031614610d7a5760405162461bcd60e51b81526004016102c890612987565b610d846000611f4c565b565b60006001865111610da95760405162461bcd60e51b81526004016102c890612a2a565b60018651610db79190612db1565b855114610dd65760405162461bcd60e51b81526004016102c8906128e2565b600086600081518110610df957634e487b7160e01b600052603260045260246000fd5b60200260200101519050806001600160a01b03166323b872dd3330886040518463ffffffff1660e01b8152600401610e33939291906125ec565b602060405180830381600087803b158015610e4d57600080fd5b505af1158015610e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8591906123e2565b610ea15760405162461bcd60e51b81526004016102c8906128ab565b84915060005b86518110156111b257878181518110610ed057634e487b7160e01b600052603260045260246000fd5b60200260200101519150600088826001610eea9190612b8b565b81518110610f0857634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610f4091906125d8565b60206040518083038186803b158015610f5857600080fd5b505afa158015610f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f909190612402565b90506000898481518110610fb457634e487b7160e01b600052603260045260246000fd5b60200260200101519050846001600160a01b031663095ea7b382886040518363ffffffff1660e01b8152600401610fec929190612696565b602060405180830381600087803b15801561100657600080fd5b505af115801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e91906123e2565b61105a5760405162461bcd60e51b81526004016102c890612950565b6040517ffe0291560000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063fe029156906110a690889087908b90600090600401612610565b602060405180830381600087803b1580156110c057600080fd5b505af11580156110d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f89190612402565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815282906001600160a01b038516906370a08231906111409030906004016125d8565b60206040518083038186803b15801561115857600080fd5b505afa15801561116c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111909190612402565b61119a9190612db1565b955050505080806111aa90612dc8565b915050610ea7565b506000600654600554846111c69190612d92565b6111d09190612ba3565b90506111dc8184612db1565b9250848310156111fe5760405162461bcd60e51b81526004016102c890612817565b876001895161120d9190612db1565b8151811061122b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663a9059cbb85856040518363ffffffff1660e01b8152600401611260929190612696565b602060405180830381600087803b15801561127a57600080fd5b505af115801561128e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b291906123e2565b507ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235886000815181106112f557634e487b7160e01b600052603260045260246000fd5b60200260200101518960018b5161130c9190612db1565b8151811061132a57634e487b7160e01b600052603260045260246000fd5b602002602001015188866040516113449493929190612610565b60405180910390a1505095945050505050565b6000546001600160a01b031690565b60608060045467ffffffffffffffff81111561139257634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113bb578160200160208202803683370190505b50915060045467ffffffffffffffff8111156113e757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611410578160200160208202803683370190505b5090508660005b89821461158457600454811061143f5760405162461bcd60e51b81526004016102c8906129bc565b600085838151811061146157634e487b7160e01b600052603260045260246000fd5b602002602001015190506002838154811061148c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b03168583815181106114ca57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505087818151811061150a57634e487b7160e01b600052603260045260246000fd5b6020026020010151838151811061153157634e487b7160e01b600052603260045260246000fd5b602002602001015184838061154590612dc8565b94508151811061156557634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101529150611417565b60028a815481106115a557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031684826115c581612dc8565b9350815181106115e557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b611613600283612ba3565b811161181957600085828151811061163b57634e487b7160e01b600052603260045260246000fd5b60200260200101519050858287516116539190612db1565b8151811061167157634e487b7160e01b600052603260045260246000fd5b602002602001015186838151811061169957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505080868388516116c89190612db1565b815181106116e657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050600285516117149190612ba3565b82116118065784828151811061173a57634e487b7160e01b600052603260045260246000fd5b60200260200101519050848286516117529190612db1565b8151811061177057634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061179857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505080858387516117c79190612db1565b815181106117e557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b508061181181612dc8565b915050611608565b505050965096945050505050565b61182f611e80565b6001600160a01b0316611840611357565b6001600160a01b0316146118665760405162461bcd60e51b81526004016102c890612987565b7fcf5b6c438b64611d8ee0722509d7ad5149d4f779f0b29bc845152f0d89e42e1961188f611357565b600554836040516118a2939291906126af565b60405180910390a1600555565b6118b7611e80565b6001600160a01b03166118c8611357565b6001600160a01b0316146118ee5760405162461bcd60e51b81526004016102c890612987565b60005b60025481101561196b57816001600160a01b03166002828154811061192657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614156119595760405162461bcd60e51b81526004016102c8906129f3565b8061196381612dc8565b9150506118f1565b506002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841617905560048054916119dc83612dc8565b91905055507f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a481604051611a1091906125d8565b60405180910390a150565b611a23611e80565b6001600160a01b0316611a34611357565b6001600160a01b031614611a5a5760405162461bcd60e51b81526004016102c890612987565b60005b600454811015611bc857600060028281548110611a8a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031690508063a9059cbb611aaf611357565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038516906370a0823190611af49030906004016125d8565b60206040518083038186803b158015611b0c57600080fd5b505afa158015611b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b449190612402565b6040518363ffffffff1660e01b8152600401611b61929190612696565b602060405180830381600087803b158015611b7b57600080fd5b505af1158015611b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb391906123e2565b50508080611bc090612dc8565b915050611a5d565b507fc708bc9126baf78945ae1d05c03aa332ca0460db0e59169024d96f0188f411d1611bf2611357565b604051611bff91906125d8565b60405180910390a1565b611c11611e80565b6001600160a01b0316611c22611357565b6001600160a01b031614611c485760405162461bcd60e51b81526004016102c890612987565b6001600160a01b038116611c6e5760405162461bcd60e51b81526004016102c89061284e565b611c7781611f4c565b50565b6000805b600454811015611ce757826001600160a01b031660028281548110611cb357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415611cd5579050611d00565b80611cdf81612dc8565b915050611c7e565b5060405162461bcd60e51b81526004016102c8906127e0565b919050565b60006001845111611d285760405162461bcd60e51b81526004016102c890612a2a565b60018451611d369190612db1565b835114611d555760405162461bcd60e51b81526004016102c8906128e2565b508060005b8351811015611e7857838181518110611d8357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663c515ee23868381518110611db957634e487b7160e01b600052603260045260246000fd5b602002602001015187846001611dcf9190612b8b565b81518110611ded57634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518463ffffffff1660e01b8152600401611e14939291906125ec565b60206040518083038186803b158015611e2c57600080fd5b505afa158015611e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e649190612402565b915080611e7081612dc8565b915050611d5a565b509392505050565b3390565b6000808213611e9257600080fd5b6000670de0b6b3a76400008312611eab57506001611ec5565b6000199050826ec097ce7bc90715b34b9f10000000000492505b6000611eda670de0b6b3a76400008505611fb4565b670de0b6b3a7640000808202945090915084821d90811415611efe57505002611d00565b6706f05b59d3b200005b6000811315611f4357670de0b6b3a7640000828002059150671bc16d674ec800008212611f3b579384019360019190911d905b60011d611f08565b50505002919050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60007001000000000000000000000000000000008210611fe157608091821c91611fde9082612b8b565b90505b68010000000000000000821061200457604091821c916120019082612b8b565b90505b640100000000821061202357602091821c916120209082612b8b565b90505b62010000821061204057601091821c9161203d9082612b8b565b90505b610100821061205c57600891821c916120599082612b8b565b90505b6010821061207757600491821c916120749082612b8b565b90505b6004821061209257600291821c9161208f9082612b8b565b90505b60028210611d00576120a5600182612b8b565b92915050565b80356001600160a01b0381168114611d0057600080fd5b600082601f8301126120d2578081fd5b813560206120e76120e283612af3565b612ac9565b8281528181019085830183850287018401881015612103578586fd5b855b8581101561212857612116826120ab565b84529284019290840190600101612105565b5090979650505050505050565b600082601f830112612145578081fd5b813560206121556120e283612af3565b82815281810190858301855b8581101561212857612178898684358b01016120c2565b84529284019290840190600101612161565b600082601f83011261219a578081fd5b813560206121aa6120e283612af3565b82815281810190858301855b85811015612128576121cd898684358b01016121df565b845292840192908401906001016121b6565b600082601f8301126121ef578081fd5b813560206121ff6120e283612af3565b828152818101908583018385028701840188101561221b578586fd5b855b858110156121285781358452928401929084019060010161221d565b60006020828403121561224a578081fd5b612253826120ab565b9392505050565b60008060006060848603121561226e578182fd5b612277846120ab565b9250612285602085016120ab565b9150604084013590509250925092565b600080600080600060a086880312156122ac578081fd5b6122b5866120ab565b94506122c3602087016120ab565b935060408601359250606086013591506122df608087016120ab565b90509295509295909350565b6000806000604084860312156122ff578283fd5b612308846120ab565b9250602084013567ffffffffffffffff80821115612324578384fd5b818601915086601f830112612337578384fd5b813581811115612345578485fd5b876020828501011115612356578485fd5b6020830194508093505050509250925092565b600080600080600060a08688031215612380578283fd5b853567ffffffffffffffff80821115612397578485fd5b6123a389838a016120c2565b965060208801359150808211156123b8578485fd5b506123c5888289016120c2565b94505060408601359250606086013591506122df608087016120ab565b6000602082840312156123f3578081fd5b81518015158114612253578182fd5b600060208284031215612413578081fd5b5051919050565b60006020828403121561242b578081fd5b5035919050565b60008060008060008060c0878903121561244a578384fd5b8635955060208701359450604087013567ffffffffffffffff8082111561246f578586fd5b61247b8a838b0161218a565b95506060890135915080821115612490578283fd5b61249c8a838b01612135565b945060808901359150808211156124b1578283fd5b6124bd8a838b016121df565b935060a08901359150808211156124d2578283fd5b506124df89828a016121df565b9150509295509295509295565b6000602082840312156124fd578081fd5b815160ff81168114612253578182fd5b6000815180845260208085019450808401835b838110156125455781516001600160a01b031687529582019590820190600101612520565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b8581101561259657828403895261258484835161250d565b9885019893509084019060010161256c565b5091979650505050505050565b6000815180845260208085019450808401835b83811015612545578151875295820195908201906001016125b6565b15159052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b60006001600160a01b03851682526040602083015282604083015282846060840137818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6000604082526126e3604083018561250d565b82810360208401526126f5818561250d565b95945050505050565b600060a0820160a0835280885180835260c0850191506020925060c0838202860101838b01855b83811015612771577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4088840301855261275f8383516125a3565b94860194925090850190600101612725565b505085810384870152612784818b612550565b9350505050828103604084015261279b81876125a3565b905082810360608401526127af81866125a3565b9150506127bf60808301846125d2565b9695505050505050565b9182526001600160a01b0316602082015260400190565b60208082526016908201527f546f6b656e206973206e6f7420737570706f7274656400000000000000000000604082015260600190565b60208082526015908201527f536c6970706167652077617320746f6f20686967680000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f5472616e73666572206661696c65640000000000000000000000000000000000604082015260600190565b6020808252601e908201527f45786368616e6765207061746820696e636f7272656374206c656e6774680000604082015260600190565b60208082526019908201527f4445582068617320616c72656164206265656e20616464656400000000000000604082015260600190565b6020808252600f908201527f417070726f76616c206661696c65640000000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600e908201527f4e6f207061746820657869737473000000000000000000000000000000000000604082015260600190565b60208082526013908201527f546f6b656e20616c726561647920616464656400000000000000000000000000604082015260600190565b60208082526024908201527f50617468206d75737420636f6e7461696e2061746c656173742074776f20746f60408201527f6b656e7300000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b600084825260606020830152612aa9606083018561250d565b82810360408401526127bf818561250d565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715612aeb57612aeb612df9565b604052919050565b600067ffffffffffffffff821115612b0d57612b0d612df9565b5060209081020190565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615612b5157612b51612de3565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615612b8557612b85612de3565b50500190565b60008219821115612b9e57612b9e612de3565b500190565b600082612bbe57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611612bd55750612c00565b818704821115612be757612be7612de3565b80861615612bf457918102915b9490941c938002612bc6565b94509492505050565b600061225360001960ff851684600082612c2557506001612253565b81612c3257506000612253565b8160018114612c485760028114612c5257612c7f565b6001915050612253565b60ff841115612c6357612c63612de3565b6001841b915084821115612c7957612c79612de3565b50612253565b5060208310610133831016604e8410600b8410161715612cb2575081810a83811115612cad57612cad612de3565b612253565b612cbf8484846001612bc3565b808604821115612cd157612cd1612de3565b02949350505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81841382841385830485118282161615612d1957612d19612de3565b7f800000000000000000000000000000000000000000000000000000000000000084871286820588128184161615612d5357612d53612de3565b858712925087820587128484161615612d6e57612d6e612de3565b87850587128184161615612d8457612d84612de3565b505050929093029392505050565b6000816000190483118215151615612dac57612dac612de3565b500290565b600082821015612dc357612dc3612de3565b500390565b6000600019821415612ddc57612ddc612de3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212206ac1976eb7a0a64be7b69569f2135a7f73ba2d328542365cf0c14b18a2fb493064736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c806372799c0c1161008c5780639012c4a8116100665780639012c4a8146101da578063d48bfca7146101ed578063db8d55f114610200578063f2fde38b14610208576100df565b806372799c0c146101915780638da5cb5b146101a45780638e811893146101b9576100df565b8063619a0d62116100bd578063619a0d62146101445780636e9105e414610168578063715018a614610189576100df565b8063089941cf146100e457806308d1aa631461010f5780635ed8bda514610124575b600080fd5b6100f76100f236600461225a565b61021b565b60405161010693929190612a90565b60405180910390f35b61012261011d3660046122eb565b610289565b005b610137610132366004612295565b6103e5565b6040516101069190612a87565b61015761015236600461241a565b61044c565b6040516101069594939291906126fe565b61017b61017636600461225a565b610b5a565b6040516101069291906127c9565b610122610d3b565b61013761019f366004612369565b610d86565b6101ac611357565b60405161010691906125d8565b6101cc6101c7366004612432565b611366565b6040516101069291906126d0565b6101226101e836600461241a565b611827565b6101226101fb366004612239565b6118af565b610122611a1b565b610122610216366004612239565b611c09565b6000606080600061022b87611c7a565b9050600061023887611c7a565b9050600080600080600061024b8761044c565b94509450945094509450600080610266898989898989611366565b9150915061027582828f611d05565b9b5050505050505050505093509350939050565b610291611e80565b6001600160a01b03166102a2611357565b6001600160a01b0316146102d15760405162461bcd60e51b81526004016102c890612987565b60405180910390fd5b6001600160a01b03831660009081526003602052604090205460ff161561030a5760405162461bcd60e51b81526004016102c890612919565b6001600160a01b03831660008181526003602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558054808201825592527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690910180547fffffffffffffffffffffffff000000000000000000000000000000000000000016909217909155517f7b1869d3ff2bcab15b83cbc59ad58cfce8f9cbd573b3c6c58cc888fea1c39f93906103d890859085908590612639565b60405180910390a1505050565b6000806103f187611c7a565b905060006103fe87611c7a565b905060008060008061040f8661044c565b509350935093509350600080610429888888888888611366565b9150915061043a82828e8e8e610d86565b9e9d5050505050505050505050505050565b606080606080600060045467ffffffffffffffff81111561047d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156104b057816020015b606081526020019060019003908161049b5790505b50945060045467ffffffffffffffff8111156104dc57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561050f57816020015b60608152602001906001900390816104fa5790505b50935060045467ffffffffffffffff81111561053b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610564578160200160208202803683370190505b50925060045467ffffffffffffffff81111561059057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156105b9578160200160208202803683370190505b50915060005b600454811015610964577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84828151811061060a57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060045467ffffffffffffffff81111561063f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610668578160200160208202803683370190505b5086828151811061068957634e487b7160e01b600052603260045260246000fd5b602002602001018190525060045467ffffffffffffffff8111156106bd57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106e6578160200160208202803683370190505b5085828151811061070757634e487b7160e01b600052603260045260246000fd5b60200260200101819052508681141561074957600084828151811061073c57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b60005b6004548110156109515760006002828154811061077957634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b031691505b60045481101561093c5760008061085c84600285815481106107c257634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561081957600080fd5b505afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085191906124ec565b61017690600a612c09565b91509150808a868151811061088157634e487b7160e01b600052603260045260246000fd5b602002602001015184815181106108a857634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101526108d46108cf83600019612cda565b611e84565b8b86815181106108f457634e487b7160e01b600052603260045260246000fd5b6020026020010151848151811061091b57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505050808061093490612dc8565b915050610790565b5050808061094990612dc8565b91505061074c565b508061095c81612dc8565b9150506105bf565b50600160005b600454811080156109785750815b15610b4f57600091508061098b81612dc8565b91505060005b600454811015610b3b5760008682815181106109bd57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060005b600454811015610b26578781815181106109f457634e487b7160e01b600052603260045260246000fd5b60200260200101518a8481518110610a1c57634e487b7160e01b600052603260045260246000fd5b60200260200101518281518110610a4357634e487b7160e01b600052603260045260246000fd5b602002602001015183610a569190612b17565b1215610b1457898381518110610a7c57634e487b7160e01b600052603260045260246000fd5b60200260200101518181518110610aa357634e487b7160e01b600052603260045260246000fd5b602002602001015182610ab69190612b17565b888281518110610ad657634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506001945082878281518110610b0757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b80610b1e81612dc8565b9150506109ca565b50508080610b3390612dc8565b915050610991565b50600454811415610b4a578192505b61096a565b505091939590929450565b6000806000805b600154811015610c8d57600060018281548110610b8e57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517fc515ee230000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c515ee2390610be4908b908b908b906004016125ec565b60206040518083038186803b158015610bfc57600080fd5b505afa158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190612402565b905082811115610c7a5780925060018281548110610c6257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031693505b5080610c8581612dc8565b915050610b61565b506040517fed72480400000000000000000000000000000000000000000000000000000000815273__$d6e5c99d87b2345c74da754aa234a52975$__9063ed72480490610ce09087908590600401612abb565b60206040518083038186803b158015610cf857600080fd5b505af4158015610d0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d309190612402565b925050935093915050565b610d43611e80565b6001600160a01b0316610d54611357565b6001600160a01b031614610d7a5760405162461bcd60e51b81526004016102c890612987565b610d846000611f4c565b565b60006001865111610da95760405162461bcd60e51b81526004016102c890612a2a565b60018651610db79190612db1565b855114610dd65760405162461bcd60e51b81526004016102c8906128e2565b600086600081518110610df957634e487b7160e01b600052603260045260246000fd5b60200260200101519050806001600160a01b03166323b872dd3330886040518463ffffffff1660e01b8152600401610e33939291906125ec565b602060405180830381600087803b158015610e4d57600080fd5b505af1158015610e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8591906123e2565b610ea15760405162461bcd60e51b81526004016102c8906128ab565b84915060005b86518110156111b257878181518110610ed057634e487b7160e01b600052603260045260246000fd5b60200260200101519150600088826001610eea9190612b8b565b81518110610f0857634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610f4091906125d8565b60206040518083038186803b158015610f5857600080fd5b505afa158015610f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f909190612402565b90506000898481518110610fb457634e487b7160e01b600052603260045260246000fd5b60200260200101519050846001600160a01b031663095ea7b382886040518363ffffffff1660e01b8152600401610fec929190612696565b602060405180830381600087803b15801561100657600080fd5b505af115801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e91906123e2565b61105a5760405162461bcd60e51b81526004016102c890612950565b6040517ffe0291560000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063fe029156906110a690889087908b90600090600401612610565b602060405180830381600087803b1580156110c057600080fd5b505af11580156110d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f89190612402565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815282906001600160a01b038516906370a08231906111409030906004016125d8565b60206040518083038186803b15801561115857600080fd5b505afa15801561116c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111909190612402565b61119a9190612db1565b955050505080806111aa90612dc8565b915050610ea7565b506000600654600554846111c69190612d92565b6111d09190612ba3565b90506111dc8184612db1565b9250848310156111fe5760405162461bcd60e51b81526004016102c890612817565b876001895161120d9190612db1565b8151811061122b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663a9059cbb85856040518363ffffffff1660e01b8152600401611260929190612696565b602060405180830381600087803b15801561127a57600080fd5b505af115801561128e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b291906123e2565b507ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235886000815181106112f557634e487b7160e01b600052603260045260246000fd5b60200260200101518960018b5161130c9190612db1565b8151811061132a57634e487b7160e01b600052603260045260246000fd5b602002602001015188866040516113449493929190612610565b60405180910390a1505095945050505050565b6000546001600160a01b031690565b60608060045467ffffffffffffffff81111561139257634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113bb578160200160208202803683370190505b50915060045467ffffffffffffffff8111156113e757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611410578160200160208202803683370190505b5090508660005b89821461158457600454811061143f5760405162461bcd60e51b81526004016102c8906129bc565b600085838151811061146157634e487b7160e01b600052603260045260246000fd5b602002602001015190506002838154811061148c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b03168583815181106114ca57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505087818151811061150a57634e487b7160e01b600052603260045260246000fd5b6020026020010151838151811061153157634e487b7160e01b600052603260045260246000fd5b602002602001015184838061154590612dc8565b94508151811061156557634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101529150611417565b60028a815481106115a557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031684826115c581612dc8565b9350815181106115e557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b611613600283612ba3565b811161181957600085828151811061163b57634e487b7160e01b600052603260045260246000fd5b60200260200101519050858287516116539190612db1565b8151811061167157634e487b7160e01b600052603260045260246000fd5b602002602001015186838151811061169957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505080868388516116c89190612db1565b815181106116e657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050600285516117149190612ba3565b82116118065784828151811061173a57634e487b7160e01b600052603260045260246000fd5b60200260200101519050848286516117529190612db1565b8151811061177057634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061179857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505080858387516117c79190612db1565b815181106117e557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b508061181181612dc8565b915050611608565b505050965096945050505050565b61182f611e80565b6001600160a01b0316611840611357565b6001600160a01b0316146118665760405162461bcd60e51b81526004016102c890612987565b7fcf5b6c438b64611d8ee0722509d7ad5149d4f779f0b29bc845152f0d89e42e1961188f611357565b600554836040516118a2939291906126af565b60405180910390a1600555565b6118b7611e80565b6001600160a01b03166118c8611357565b6001600160a01b0316146118ee5760405162461bcd60e51b81526004016102c890612987565b60005b60025481101561196b57816001600160a01b03166002828154811061192657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614156119595760405162461bcd60e51b81526004016102c8906129f3565b8061196381612dc8565b9150506118f1565b506002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841617905560048054916119dc83612dc8565b91905055507f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a481604051611a1091906125d8565b60405180910390a150565b611a23611e80565b6001600160a01b0316611a34611357565b6001600160a01b031614611a5a5760405162461bcd60e51b81526004016102c890612987565b60005b600454811015611bc857600060028281548110611a8a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031690508063a9059cbb611aaf611357565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038516906370a0823190611af49030906004016125d8565b60206040518083038186803b158015611b0c57600080fd5b505afa158015611b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b449190612402565b6040518363ffffffff1660e01b8152600401611b61929190612696565b602060405180830381600087803b158015611b7b57600080fd5b505af1158015611b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb391906123e2565b50508080611bc090612dc8565b915050611a5d565b507fc708bc9126baf78945ae1d05c03aa332ca0460db0e59169024d96f0188f411d1611bf2611357565b604051611bff91906125d8565b60405180910390a1565b611c11611e80565b6001600160a01b0316611c22611357565b6001600160a01b031614611c485760405162461bcd60e51b81526004016102c890612987565b6001600160a01b038116611c6e5760405162461bcd60e51b81526004016102c89061284e565b611c7781611f4c565b50565b6000805b600454811015611ce757826001600160a01b031660028281548110611cb357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415611cd5579050611d00565b80611cdf81612dc8565b915050611c7e565b5060405162461bcd60e51b81526004016102c8906127e0565b919050565b60006001845111611d285760405162461bcd60e51b81526004016102c890612a2a565b60018451611d369190612db1565b835114611d555760405162461bcd60e51b81526004016102c8906128e2565b508060005b8351811015611e7857838181518110611d8357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663c515ee23868381518110611db957634e487b7160e01b600052603260045260246000fd5b602002602001015187846001611dcf9190612b8b565b81518110611ded57634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518463ffffffff1660e01b8152600401611e14939291906125ec565b60206040518083038186803b158015611e2c57600080fd5b505afa158015611e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e649190612402565b915080611e7081612dc8565b915050611d5a565b509392505050565b3390565b6000808213611e9257600080fd5b6000670de0b6b3a76400008312611eab57506001611ec5565b6000199050826ec097ce7bc90715b34b9f10000000000492505b6000611eda670de0b6b3a76400008505611fb4565b670de0b6b3a7640000808202945090915084821d90811415611efe57505002611d00565b6706f05b59d3b200005b6000811315611f4357670de0b6b3a7640000828002059150671bc16d674ec800008212611f3b579384019360019190911d905b60011d611f08565b50505002919050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60007001000000000000000000000000000000008210611fe157608091821c91611fde9082612b8b565b90505b68010000000000000000821061200457604091821c916120019082612b8b565b90505b640100000000821061202357602091821c916120209082612b8b565b90505b62010000821061204057601091821c9161203d9082612b8b565b90505b610100821061205c57600891821c916120599082612b8b565b90505b6010821061207757600491821c916120749082612b8b565b90505b6004821061209257600291821c9161208f9082612b8b565b90505b60028210611d00576120a5600182612b8b565b92915050565b80356001600160a01b0381168114611d0057600080fd5b600082601f8301126120d2578081fd5b813560206120e76120e283612af3565b612ac9565b8281528181019085830183850287018401881015612103578586fd5b855b8581101561212857612116826120ab565b84529284019290840190600101612105565b5090979650505050505050565b600082601f830112612145578081fd5b813560206121556120e283612af3565b82815281810190858301855b8581101561212857612178898684358b01016120c2565b84529284019290840190600101612161565b600082601f83011261219a578081fd5b813560206121aa6120e283612af3565b82815281810190858301855b85811015612128576121cd898684358b01016121df565b845292840192908401906001016121b6565b600082601f8301126121ef578081fd5b813560206121ff6120e283612af3565b828152818101908583018385028701840188101561221b578586fd5b855b858110156121285781358452928401929084019060010161221d565b60006020828403121561224a578081fd5b612253826120ab565b9392505050565b60008060006060848603121561226e578182fd5b612277846120ab565b9250612285602085016120ab565b9150604084013590509250925092565b600080600080600060a086880312156122ac578081fd5b6122b5866120ab565b94506122c3602087016120ab565b935060408601359250606086013591506122df608087016120ab565b90509295509295909350565b6000806000604084860312156122ff578283fd5b612308846120ab565b9250602084013567ffffffffffffffff80821115612324578384fd5b818601915086601f830112612337578384fd5b813581811115612345578485fd5b876020828501011115612356578485fd5b6020830194508093505050509250925092565b600080600080600060a08688031215612380578283fd5b853567ffffffffffffffff80821115612397578485fd5b6123a389838a016120c2565b965060208801359150808211156123b8578485fd5b506123c5888289016120c2565b94505060408601359250606086013591506122df608087016120ab565b6000602082840312156123f3578081fd5b81518015158114612253578182fd5b600060208284031215612413578081fd5b5051919050565b60006020828403121561242b578081fd5b5035919050565b60008060008060008060c0878903121561244a578384fd5b8635955060208701359450604087013567ffffffffffffffff8082111561246f578586fd5b61247b8a838b0161218a565b95506060890135915080821115612490578283fd5b61249c8a838b01612135565b945060808901359150808211156124b1578283fd5b6124bd8a838b016121df565b935060a08901359150808211156124d2578283fd5b506124df89828a016121df565b9150509295509295509295565b6000602082840312156124fd578081fd5b815160ff81168114612253578182fd5b6000815180845260208085019450808401835b838110156125455781516001600160a01b031687529582019590820190600101612520565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b8581101561259657828403895261258484835161250d565b9885019893509084019060010161256c565b5091979650505050505050565b6000815180845260208085019450808401835b83811015612545578151875295820195908201906001016125b6565b15159052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b60006001600160a01b03851682526040602083015282604083015282846060840137818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6000604082526126e3604083018561250d565b82810360208401526126f5818561250d565b95945050505050565b600060a0820160a0835280885180835260c0850191506020925060c0838202860101838b01855b83811015612771577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4088840301855261275f8383516125a3565b94860194925090850190600101612725565b505085810384870152612784818b612550565b9350505050828103604084015261279b81876125a3565b905082810360608401526127af81866125a3565b9150506127bf60808301846125d2565b9695505050505050565b9182526001600160a01b0316602082015260400190565b60208082526016908201527f546f6b656e206973206e6f7420737570706f7274656400000000000000000000604082015260600190565b60208082526015908201527f536c6970706167652077617320746f6f20686967680000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f5472616e73666572206661696c65640000000000000000000000000000000000604082015260600190565b6020808252601e908201527f45786368616e6765207061746820696e636f7272656374206c656e6774680000604082015260600190565b60208082526019908201527f4445582068617320616c72656164206265656e20616464656400000000000000604082015260600190565b6020808252600f908201527f417070726f76616c206661696c65640000000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600e908201527f4e6f207061746820657869737473000000000000000000000000000000000000604082015260600190565b60208082526013908201527f546f6b656e20616c726561647920616464656400000000000000000000000000604082015260600190565b60208082526024908201527f50617468206d75737420636f6e7461696e2061746c656173742074776f20746f60408201527f6b656e7300000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b600084825260606020830152612aa9606083018561250d565b82810360408401526127bf818561250d565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715612aeb57612aeb612df9565b604052919050565b600067ffffffffffffffff821115612b0d57612b0d612df9565b5060209081020190565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615612b5157612b51612de3565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615612b8557612b85612de3565b50500190565b60008219821115612b9e57612b9e612de3565b500190565b600082612bbe57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611612bd55750612c00565b818704821115612be757612be7612de3565b80861615612bf457918102915b9490941c938002612bc6565b94509492505050565b600061225360001960ff851684600082612c2557506001612253565b81612c3257506000612253565b8160018114612c485760028114612c5257612c7f565b6001915050612253565b60ff841115612c6357612c63612de3565b6001841b915084821115612c7957612c79612de3565b50612253565b5060208310610133831016604e8410600b8410161715612cb2575081810a83811115612cad57612cad612de3565b612253565b612cbf8484846001612bc3565b808604821115612cd157612cd1612de3565b02949350505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81841382841385830485118282161615612d1957612d19612de3565b7f800000000000000000000000000000000000000000000000000000000000000084871286820588128184161615612d5357612d53612de3565b858712925087820587128484161615612d6e57612d6e612de3565b87850587128184161615612d8457612d84612de3565b505050929093029392505050565b6000816000190483118215151615612dac57612dac612de3565b500290565b600082821015612dc357612dc3612de3565b500390565b6000600019821415612ddc57612ddc612de3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212206ac1976eb7a0a64be7b69569f2135a7f73ba2d328542365cf0c14b18a2fb493064736f6c63430008000033",
  "libraries": {
    "OpenMath": "0x8D8D982DFC974A9F81F68DCfA1E42be540673877"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Minima.sol:Minima",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1589,
        "contract": "contracts/Minima.sol:Minima",
        "label": "dexs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1592,
        "contract": "contracts/Minima.sol:Minima",
        "label": "supportedTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1596,
        "contract": "contracts/Minima.sol:Minima",
        "label": "dexKnown",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1598,
        "contract": "contracts/Minima.sol:Minima",
        "label": "numTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1606,
        "contract": "contracts/Minima.sol:Minima",
        "label": "fee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1611,
        "contract": "contracts/Minima.sol:Minima",
        "label": "FEE_DENOM",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}