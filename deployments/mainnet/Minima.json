{
  "address": "0x33252d35a56cb1845eB017Db2C05aB1bCEA47de3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "initialTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "initialDexes",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dex",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "DexAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "FeesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dexAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "addDex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenFromIndex",
          "type": "uint256"
        }
      ],
      "name": "fillBoard",
      "outputs": [
        {
          "internalType": "address[][]",
          "name": "exchanges",
          "type": "address[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "parents",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "arbExists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getBestExchange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "exchange",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getExpectedOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "exchangePath",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "exchangePath",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getExpectedOutFromPath",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expectedOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenFromIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenOutIndex",
          "type": "uint256"
        },
        {
          "internalType": "address[][]",
          "name": "exchanges",
          "type": "address[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "parents",
          "type": "uint256[]"
        }
      ],
      "name": "getPathFromBoard",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "exchangePath",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "exchangePath",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "swapOnChain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "updateFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9b52d802a41102a68db602589e71c3d5fbb53f5d05aad6c42b398a06a269c806",
  "receipt": {
    "to": null,
    "from": "0x4ea77424Da100ac856ece3DDfAbd8B528570Ca0d",
    "contractAddress": "0x33252d35a56cb1845eB017Db2C05aB1bCEA47de3",
    "transactionIndex": 3,
    "gasUsed": "3082009",
    "logsBloom": "0x
    "blockHash": "0xfe1338cd1c0410bc2eb3a00115572479b35d8e90599373cc59401d136e6d7fea",
    "transactionHash": "0x9b52d802a41102a68db602589e71c3d5fbb53f5d05aad6c42b398a06a269c806",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 10039751,
        "transactionHash": "0x9b52d802a41102a68db602589e71c3d5fbb53f5d05aad6c42b398a06a269c806",
        "address": "0x33252d35a56cb1845eB017Db2C05aB1bCEA47de3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ea77424da100ac856ece3ddfabd8b528570ca0d"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0xfe1338cd1c0410bc2eb3a00115572479b35d8e90599373cc59401d136e6d7fea"
      }
    ],
    "blockNumber": 10039751,
    "cumulativeGasUsed": "4340788",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x471EcE3750Da237f93B8E339c536989b8978a438",
      "0x765DE816845861e75A25fCA122bb6898B8B1282a",
      "0x2A3684e9Dc20B857375EA04235F2F7edBe818FA7",
      "0xD8763CBa276a3738E6DE85b4b3bF5FDed6D6cA73",
      "0x918146359264C492BD6934071c6Bd31C854EDBc3",
      "0x73a210637f6F6B7005512677Ba6B3C96bb4AA44B"
    ],
    [
      "0x6581479e21BCc8E34ed2eCb83b0Ec8fe38c738aA",
      "0x6e3948f5bC44F2411b023C62071f9a49245DDE5F"
    ]
  ],
  "solcInputHash": "1cec5ccfe09e50fa7164434ae0aaaf7f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"initialDexes\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"DexAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dexAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenFromIndex\",\"type\":\"uint256\"}],\"name\":\"fillBoard\",\"outputs\":[{\"internalType\":\"address[][]\",\"name\":\"exchanges\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"parents\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"arbExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getBestExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getExpectedOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"exchangePath\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"exchangePath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getExpectedOutFromPath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenFromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[][]\",\"name\":\"exchanges\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"parents\",\"type\":\"uint256[]\"}],\"name\":\"getPathFromBoard\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"exchangePath\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"exchangePath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swapOnChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Minima.sol\":\"Minima\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/AMMs/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IWrapper {\\n  // function getQuotes(address tokenIn, uint256 amountIn)\\n  //   external\\n  //   view\\n  //   returns (uint256[] memory expectedOut, address[] memory tokensOut);\\n\\n  function getQuote(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) external view returns (uint256);\\n\\n  function swap(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minAmountOut\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xe28ad8a2e64da6b69dd248a3eeff8544af45bf910ad0d3d0a1e53318a9389e17\",\"license\":\"ISC\"},\"contracts/Minima.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AMMs/IWrapper.sol\\\";\\nimport \\\"./OpenMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Minima is Ownable {\\n  using OpenMath for *;\\n  address[] dexs;\\n  address[] supportedTokens;\\n  mapping(address => bool) dexKnown;\\n  uint256 numTokens;\\n  uint256 fee = 5 * (10**7);\\n  uint256 FEE_DENOM = 10**10;\\n\\n  event FeeUpdated(address owner, uint256 oldFee, uint256 newFee);\\n  event FeesClaimed(address owner);\\n  event TokenAdded(address token);\\n  event DexAdded(address dex, string name);\\n  event Swap(\\n    address tokenFrom,\\n    address tokenTo,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  constructor(address[] memory initialTokens, address[] memory initialDexes) {\\n    for (uint256 i = 0; i < initialTokens.length; i++) {\\n      supportedTokens.push(initialTokens[i]);\\n      numTokens++;\\n    }\\n    for (uint256 i = 0; i < initialDexes.length; i++) {\\n      dexKnown[initialDexes[i]] = true;\\n      dexs.push(initialDexes[i]);\\n    }\\n  }\\n\\n  function addDex(address dexAddress, string calldata name) external onlyOwner {\\n    require(!dexKnown[dexAddress], \\\"DEX has alread been added\\\");\\n    dexKnown[dexAddress] = true;\\n    dexs.push(dexAddress);\\n    emit DexAdded(dexAddress, name);\\n  }\\n\\n  function addToken(address newToken) external onlyOwner {\\n    for (uint256 i = 0; i < supportedTokens.length; i++) {\\n      require(supportedTokens[i] != newToken, \\\"Token already added\\\");\\n    }\\n    supportedTokens.push(newToken);\\n    numTokens++;\\n    emit TokenAdded(newToken);\\n  }\\n\\n  function updateFee(uint256 _fee) external onlyOwner {\\n    emit FeeUpdated(owner(), fee, _fee);\\n    fee = _fee;\\n  }\\n\\n  function getFees() external onlyOwner {\\n    for (uint256 i = 0; i < numTokens; i++) {\\n      IERC20 token = IERC20(supportedTokens[i]);\\n      token.transfer(owner(), token.balanceOf(address(this)));\\n    }\\n    emit FeesClaimed(owner());\\n  }\\n\\n  function getBestExchange(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) public view returns (uint256 rate, address exchange) {\\n    uint256 amountOut = 0;\\n    for (uint256 i = 0; i < dexs.length; i++) {\\n      uint256 quote = IWrapper(dexs[i]).getQuote(tokenIn, tokenOut, amountIn);\\n      if (quote > amountOut) {\\n        amountOut = quote;\\n        exchange = dexs[i];\\n      }\\n    }\\n    rate = OpenMath.exchangeRate(amountIn, amountOut);\\n  }\\n\\n  function getTokenIndex(address token) internal view returns (uint256) {\\n    for (uint256 i = 0; i < numTokens; i++) {\\n      if (address(supportedTokens[i]) == token) {\\n        return i;\\n      }\\n    }\\n    revert(\\\"Token not supported\\\");\\n  }\\n\\n  function getExpectedOutFromPath(\\n    address[] memory tokenPath,\\n    address[] memory exchangePath,\\n    uint256 amountIn\\n  ) public view returns (uint256 expectedOut) {\\n    require(tokenPath.length > 1, \\\"Path must contain atleast two tokens\\\");\\n    require(\\n      exchangePath.length == tokenPath.length - 1,\\n      \\\"Exchange path incorrect length\\\"\\n    );\\n\\n    expectedOut = amountIn;\\n    uint256 i = 0;\\n    while (i < exchangePath.length && exchangePath[i] != address(0)) {\\n      expectedOut = IWrapper(exchangePath[i]).getQuote(\\n        tokenPath[i],\\n        tokenPath[++i],\\n        expectedOut\\n      );\\n    }\\n  }\\n\\n  function getExpectedOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 amountOut,\\n      address[] memory tokenPath,\\n      address[] memory exchangePath\\n    )\\n  {\\n    uint256 tokenFromIndex = getTokenIndex(tokenIn);\\n    uint256 tokenOutIndex = getTokenIndex(tokenOut);\\n\\n    (\\n      address[][] memory exchanges,\\n      uint256[] memory parents,\\n      bool arbExists\\n    ) = fillBoard(tokenFromIndex);\\n    (\\n      address[] memory _tokenPath,\\n      address[] memory _exchangePath\\n    ) = getPathFromBoard(tokenFromIndex, tokenOutIndex, exchanges, parents);\\n    tokenPath = _tokenPath;\\n    exchangePath = _exchangePath;\\n    amountOut = getExpectedOutFromPath(tokenPath, exchangePath, amountIn);\\n  }\\n\\n  function fillBoard(uint256 tokenFromIndex)\\n    public\\n    view\\n    returns (\\n      address[][] memory exchanges,\\n      uint256[] memory parents,\\n      bool arbExists\\n    )\\n  {\\n    int256[][] memory exchangeRates = new int256[][](numTokens);\\n    int256[] memory pathTo = new int256[](numTokens);\\n    exchanges = new address[][](numTokens);\\n    parents = new uint256[](numTokens);\\n\\n    for (uint256 i = 0; i < numTokens; i++) {\\n      pathTo[i] = OpenMath.MAX_INT;\\n      exchangeRates[i] = new int256[](numTokens);\\n      exchanges[i] = new address[](numTokens);\\n      if (i == tokenFromIndex) {\\n        pathTo[i] = 0;\\n      }\\n      ERC20 tokenIn = ERC20(supportedTokens[i]);\\n      uint256 decimals = 10**tokenIn.decimals();\\n      for (uint256 j = 0; j < numTokens; j++) {\\n        (uint256 rate, address exchange) = getBestExchange(\\n          supportedTokens[i],\\n          supportedTokens[j],\\n          100 * decimals\\n        );\\n        exchanges[i][j] = exchange;\\n        exchangeRates[i][j] = rate == 0\\n          ? OpenMath.MAX_INT\\n          : -1 * OpenMath.log_2(rate);\\n      }\\n    }\\n\\n    uint256 iteration = 0;\\n    {\\n      bool improved = true;\\n      while (iteration < numTokens && improved) {\\n        improved = false;\\n        iteration++;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n          int256 curCost = pathTo[i];\\n          if (curCost != OpenMath.MAX_INT) {\\n            for (uint256 j = 0; j < numTokens; j++) {\\n              if (\\n                exchangeRates[i][j] < OpenMath.MAX_INT &&\\n                curCost + exchangeRates[i][j] < pathTo[j]\\n              ) {\\n                pathTo[j] = curCost + exchangeRates[i][j];\\n                improved = true;\\n                parents[j] = i;\\n              }\\n            }\\n          }\\n        }\\n        if (iteration == numTokens) {\\n          arbExists = improved;\\n        }\\n      }\\n    }\\n  }\\n\\n  function getPathFromBoard(\\n    uint256 tokenFromIndex,\\n    uint256 tokenOutIndex,\\n    address[][] memory exchanges,\\n    uint256[] memory parents\\n  )\\n    public\\n    view\\n    returns (address[] memory tokenPath, address[] memory exchangePath)\\n  {\\n    address[] memory backPath = new address[](numTokens);\\n    address[] memory backExchPath = new address[](numTokens - 1);\\n    tokenPath = new address[](numTokens);\\n    exchangePath = new address[](numTokens - 1);\\n    uint256 curIndex = tokenOutIndex;\\n    uint256 iterations = 0;\\n\\n    while (curIndex != tokenFromIndex) {\\n      require(iterations < numTokens, \\\"No path exists\\\");\\n      uint256 parent = parents[curIndex];\\n      backPath[iterations] = supportedTokens[curIndex];\\n      backExchPath[iterations++] = exchanges[parent][curIndex];\\n      curIndex = parent;\\n    }\\n\\n    tokenPath[0] = supportedTokens[tokenFromIndex];\\n    for (uint256 i = 1; i <= iterations; i++) {\\n      tokenPath[i] = backPath[iterations - i];\\n      exchangePath[i - 1] = backExchPath[iterations - i];\\n    }\\n  }\\n\\n  // To do - add check for 0x0 address in exchangePath\\n  function swap(\\n    address[] memory tokenPath,\\n    address[] memory exchangePath,\\n    uint256 amountIn,\\n    uint256 minAmountOut,\\n    address recipient\\n  ) public returns (uint256 actualAmountOut) {\\n    require(tokenPath.length > 1, \\\"Path must contain atleast two tokens\\\");\\n    require(\\n      exchangePath.length == tokenPath.length - 1,\\n      \\\"Exchange path incorrect length\\\"\\n    );\\n    IERC20 inputToken = IERC20(tokenPath[0]);\\n    require(\\n      inputToken.transferFrom(msg.sender, address(this), amountIn),\\n      \\\"Transfer failed\\\"\\n    );\\n    actualAmountOut = amountIn;\\n    uint256 i = 0;\\n    while (i < exchangePath.length && exchangePath[i] != address(0)) {\\n      address exchange = exchangePath[i];\\n      inputToken = IERC20(tokenPath[i]);\\n      IERC20 outToken = IERC20(tokenPath[++i]);\\n      uint256 startingBalance = outToken.balanceOf(address(this));\\n      require(inputToken.approve(exchange, actualAmountOut), \\\"Approval failed\\\");\\n\\n      IWrapper(exchange).swap(\\n        address(inputToken),\\n        address(outToken),\\n        actualAmountOut,\\n        0\\n      );\\n      actualAmountOut = outToken.balanceOf(address(this)) - startingBalance;\\n    }\\n    uint256 swapFee = (actualAmountOut * fee) / FEE_DENOM;\\n    actualAmountOut -= swapFee;\\n\\n    require(actualAmountOut >= minAmountOut, \\\"Slippage was too high\\\");\\n    IERC20(tokenPath[i]).transfer(recipient, actualAmountOut);\\n    emit Swap(tokenPath[0], tokenPath[i], amountIn, actualAmountOut);\\n  }\\n\\n  function swapOnChain(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minAmountOut,\\n    address recipient\\n  ) external returns (uint256) {\\n    uint256 tokenFromIndex = getTokenIndex(tokenIn);\\n    uint256 tokenOutIndex = getTokenIndex(tokenOut);\\n\\n    (address[][] memory exchanges, uint256[] memory parents, ) = fillBoard(\\n      tokenFromIndex\\n    );\\n\\n    (\\n      address[] memory tokenPath,\\n      address[] memory exchangePath\\n    ) = getPathFromBoard(tokenFromIndex, tokenOutIndex, exchanges, parents);\\n    return swap(tokenPath, exchangePath, amountIn, minAmountOut, recipient);\\n  }\\n}\\n\",\"keccak256\":\"0xe70c781636c8158e4db2f9d157f1a3cd3abac1f664ef88fef0e9f376223419c6\",\"license\":\"ISC\"},\"contracts/OpenMath.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nlibrary OpenMath {\\n  uint256 constant MAX_UINT = 2**256 - 1;\\n  uint256 constant DECIMALS_UINT = 10**18;\\n  int256 constant DECIMALS_SIGNED = 10**18;\\n  int256 constant MAX_INT = 2**255 - 1;\\n  uint256 internal constant HALF_SCALE = 5e17;\\n\\n  /// @dev How many trailing decimals can be represented.\\n  int256 internal constant SCALE = 1e18;\\n\\n  // 2^127.\\n  uint128 private constant TWO127 = 0x80000000000000000000000000000000;\\n\\n  // 2^128 - 1\\n  uint128 private constant TWO128_1 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  // ln(2) * 2^128\\n  uint128 private constant LN2 = 0xb17217f7d1cf79abc9e3b39803f2f6af;\\n\\n  /**\\n   * Return index of most significant non-zero bit in given non-zero 256-bit\\n   * unsigned integer value.\\n   *\\n   * @param _x value to get index of most significant non-zero bit in\\n   * @return r index of most significant non-zero bit in given number\\n   */\\n  function mostSignificantBit(uint256 _x) internal pure returns (uint8 r) {\\n    require(_x > 0);\\n\\n    uint256 x = _x;\\n    r = 0;\\n    if (x >= 0x100000000000000000000000000000000) {\\n      x >>= 128;\\n      r += 128;\\n    }\\n    if (x >= 0x10000000000000000) {\\n      x >>= 64;\\n      r += 64;\\n    }\\n    if (x >= 0x100000000) {\\n      x >>= 32;\\n      r += 32;\\n    }\\n    if (x >= 0x10000) {\\n      x >>= 16;\\n      r += 16;\\n    }\\n    if (x >= 0x100) {\\n      x >>= 8;\\n      r += 8;\\n    }\\n    if (x >= 0x10) {\\n      x >>= 4;\\n      r += 4;\\n    }\\n    if (x >= 0x4) {\\n      x >>= 2;\\n      r += 2;\\n    }\\n    if (x >= 0x2) r += 1; // No need to shift x anymore\\n  }\\n\\n  /*\\nfunction mostSignificantBit (uint256 x) pure internal returns (uint8) {\\n  require (x > 0);\\n\\n  uint8 l = 0;\\n  uint8 h = 255;\\n\\n  while (h > l) {\\n    uint8 m = uint8 ((uint16 (l) + uint16 (h)) >> 1);\\n    uint256 t = x >> m;\\n    if (t == 0) h = m - 1;\\n    else if (t > 1) l = m + 1;\\n    else return m;\\n  }\\n\\n  return h;\\n}\\n*/\\n\\n  /**\\n   * Calculate log_2 (x / 2^128) * 2^128.\\n   *\\n   * @param _x parameter value\\n   * @return log_2 (x / 2^128) * 2^128\\n   */\\n  function log_2(uint256 _x) internal pure returns (int256) {\\n    require(_x > 0, \\\"Must be a positive number\\\");\\n    uint256 x = _x;\\n    uint8 msb = mostSignificantBit(x);\\n    if (msb > 128) x >>= msb - 128;\\n    else if (msb < 128) x <<= 128 - msb;\\n\\n    x &= TWO128_1;\\n\\n    int256 result = (int256(msb) - 128) << 128; // Integer part of log_2\\n\\n    int256 bit = TWO127;\\n    for (uint8 i = 0; i < 128 && x > 0; i++) {\\n      x = (x << 1) + ((x * x + TWO127) >> 128);\\n      if (x > TWO128_1) {\\n        result |= bit;\\n        x = (x >> 1) - TWO127;\\n      }\\n      bit >>= 1;\\n    }\\n\\n    return result;\\n  }\\n\\n  // Returns exchange rate as a 59.18 decimal integer\\n  function exchangeRate(uint256 amountIn, uint256 amountOut)\\n    public\\n    pure\\n    returns (uint256 exchange)\\n  {\\n    exchange = (amountOut * DECIMALS_UINT) / amountIn;\\n  }\\n}\\n\",\"keccak256\":\"0x2418b2fe22a4e35863813975d73f232a30acb962f47615df58e3405f49979ae9\",\"license\":\"ISC\"}},\"version\":1}",
  "bytecode": "0x60806040526302faf0806005556402540be4006006553480156200002257600080fd5b506040516200341e3803806200341e8339810160408190526200004591620002fb565b6200005962000053620001e0565b620001e4565b60005b8251811015620000f05760028382815181106200008957634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600181018455600093845291832090910180546001600160a01b0319166001600160a01b039092169190911790556004805491620000d58362000362565b91905055508080620000e79062000362565b9150506200005c565b5060005b8151811015620001d7576001600360008484815181106200012557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060018282815181106200018757634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580620001ce8162000362565b915050620000f4565b505050620003a0565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200024c57600080fd5b919050565b600082601f83011262000262578081fd5b815160206001600160401b03808311156200028157620002816200038a565b81830260405183828201018181108482111715620002a357620002a36200038a565b60405284815283810192508684018288018501891015620002c2578687fd5b8692505b85831015620002ef57620002da8162000234565b845292840192600192909201918401620002c6565b50979650505050505050565b600080604083850312156200030e578182fd5b82516001600160401b038082111562000325578384fd5b620003338683870162000251565b9350602085015191508082111562000349578283fd5b50620003588582860162000251565b9150509250929050565b60006000198214156200038357634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b61306e80620003b06000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063c7b6deca11610066578063c7b6deca146101f6578063d48bfca714610209578063db8d55f11461021c578063f2fde38b14610224576100ea565b80638da5cb5b146101ad5780638f84e6d7146101c25780639012c4a8146101e3576100ea565b8063619a0d62116100c8578063619a0d621461014f5780636e9105e414610171578063715018a61461019257806372799c0c1461019a576100ea565b8063089941cf146100ef57806308d1aa631461011a5780635ed8bda51461012f575b600080fd5b6101026100fd366004612378565b610237565b60405161011193929190612bd3565b60405180910390f35b61012d610128366004612409565b6102a0565b005b61014261013d3660046123b3565b6103fc565b6040516101119190612bb3565b61016261015d36600461258a565b610458565b6040516101119392919061280f565b61018461017f366004612378565b610c6a565b604051610111929190612bbc565b61012d610e4b565b6101426101a83660046124f1565b610e96565b6101b561149f565b60405161011191906126e9565b6101d56101d03660046125ba565b6114ae565b6040516101119291906127e1565b61012d6101f136600461258a565b611908565b610142610204366004612487565b611990565b61012d610217366004612357565b611b44565b61012d611cb0565b61012d610232366004612357565b611e9e565b6000606080600061024787611f0f565b9050600061025487611f0f565b9050600080600061026485610458565b925092509250600080610279878787876114ae565b9150915081985080975061028e89898d611990565b99505050505050505093509350939050565b6102a8611f9a565b6001600160a01b03166102b961149f565b6001600160a01b0316146102e85760405162461bcd60e51b81526004016102df90612a7c565b60405180910390fd5b6001600160a01b03831660009081526003602052604090205460ff16156103215760405162461bcd60e51b81526004016102df90612a0e565b6001600160a01b03831660008181526003602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558054808201825592527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690910180547fffffffffffffffffffffffff000000000000000000000000000000000000000016909217909155517f7b1869d3ff2bcab15b83cbc59ad58cfce8f9cbd573b3c6c58cc888fea1c39f93906103ef9085908590859061274a565b60405180910390a1505050565b60008061040887611f0f565b9050600061041587611f0f565b905060008061042384610458565b5091509150600080610437868686866114ae565b9150915061044882828c8c8c610e96565b9c9b505050505050505050505050565b60608060008060045467ffffffffffffffff81111561048757634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156104ba57816020015b60608152602001906001900390816104a55790505b509050600060045467ffffffffffffffff8111156104e857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610511578160200160208202803683370190505b50905060045467ffffffffffffffff81111561053d57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561057057816020015b606081526020019060019003908161055b5790505b50945060045467ffffffffffffffff81111561059c57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156105c5578160200160208202803683370190505b50935060005b6004548110156109d5577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82828151811061061657634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060045467ffffffffffffffff81111561064b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610674578160200160208202803683370190505b5083828151811061069557634e487b7160e01b600052603260045260246000fd5b602002602001018190525060045467ffffffffffffffff8111156106c957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106f2578160200160208202803683370190505b5086828151811061071357634e487b7160e01b600052603260045260246000fd5b60200260200101819052508681141561075557600082828151811061074857634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b60006002828154811061077857634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169450849263313ce56792600480840193829003018186803b1580156107de57600080fd5b505afa1580156107f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610816919061267f565b61082190600a612d7b565b905060005b6004548110156109bf576000806108b16002878154811061085757634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600280546001600160a01b03909216918690811061089157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031661017f876064612f04565b91509150808b87815181106108d657634e487b7160e01b600052603260045260246000fd5b602002602001015184815181106108fd57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015281156109355761092482611f9e565b61093090600019612e4c565b610957565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b88878151811061097757634e487b7160e01b600052603260045260246000fd5b6020026020010151848151811061099e57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050505080806109b790612fd1565b915050610826565b50505080806109cd90612fd1565b9150506105cb565b50600060015b600454821080156109e95750805b15610c5f57506000816109fb81612fd1565b92505060005b600454811015610c4b576000848281518110610a2d57634e487b7160e01b600052603260045260246000fd5b602002602001015190507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610c385760005b600454811015610c36577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff878481518110610aac57634e487b7160e01b600052603260045260246000fd5b60200260200101518281518110610ad357634e487b7160e01b600052603260045260246000fd5b6020026020010151128015610b675750858181518110610b0357634e487b7160e01b600052603260045260246000fd5b6020026020010151878481518110610b2b57634e487b7160e01b600052603260045260246000fd5b60200260200101518281518110610b5257634e487b7160e01b600052603260045260246000fd5b602002602001015183610b659190612c64565b125b15610c2457868381518110610b8c57634e487b7160e01b600052603260045260246000fd5b60200260200101518181518110610bb357634e487b7160e01b600052603260045260246000fd5b602002602001015182610bc69190612c64565b868281518110610be657634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506001935082898281518110610c1757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b80610c2e81612fd1565b915050610a61565b505b5080610c4381612fd1565b915050610a01565b50600454821415610c5a578094505b6109db565b505050509193909250565b6000806000805b600154811015610d9d57600060018281548110610c9e57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517fc515ee230000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c515ee2390610cf4908b908b908b906004016126fd565b60206040518083038186803b158015610d0c57600080fd5b505afa158015610d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4491906125a2565b905082811115610d8a5780925060018281548110610d7257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031693505b5080610d9581612fd1565b915050610c71565b506040517fed72480400000000000000000000000000000000000000000000000000000000815273B870ACfCeab32d7Ed7AfFb71F3dbcAaEc3B9C3Bc9063ed72480490610df09087908590600401612c08565b60206040518083038186803b158015610e0857600080fd5b505af4158015610e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4091906125a2565b925050935093915050565b610e53611f9a565b6001600160a01b0316610e6461149f565b6001600160a01b031614610e8a5760405162461bcd60e51b81526004016102df90612a7c565b610e946000612101565b565b60006001865111610eb95760405162461bcd60e51b81526004016102df90612b56565b60018651610ec79190612f97565b855114610ee65760405162461bcd60e51b81526004016102df906129a0565b600086600081518110610f0957634e487b7160e01b600052603260045260246000fd5b60200260200101519050806001600160a01b03166323b872dd3330886040518463ffffffff1660e01b8152600401610f43939291906126fd565b602060405180830381600087803b158015610f5d57600080fd5b505af1158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f95919061256a565b610fb15760405162461bcd60e51b81526004016102df90612969565b84915060005b865181108015611001575060006001600160a01b0316878281518110610fed57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b1561131457600087828151811061102857634e487b7160e01b600052603260045260246000fd5b6020026020010151905088828151811061105257634e487b7160e01b600052603260045260246000fd5b602002602001015192506000898361106990612fd1565b9350838151811061108a57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016110c291906126e9565b60206040518083038186803b1580156110da57600080fd5b505afa1580156110ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111291906125a2565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081529091506001600160a01b0386169063095ea7b39061115c9086908a906004016127a7565b602060405180830381600087803b15801561117657600080fd5b505af115801561118a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ae919061256a565b6111ca5760405162461bcd60e51b81526004016102df90612a45565b6040517ffe0291560000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063fe0291569061121690889086908b90600090600401612721565b602060405180830381600087803b15801561123057600080fd5b505af1158015611244573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126891906125a2565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815281906001600160a01b038416906370a08231906112b09030906004016126e9565b60206040518083038186803b1580156112c857600080fd5b505afa1580156112dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130091906125a2565b61130a9190612f97565b9550505050610fb7565b6000600654600554856113279190612f04565b6113319190612d15565b905061133d8185612f97565b93508584101561135f5760405162461bcd60e51b81526004016102df906128d5565b88828151811061137f57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663a9059cbb86866040518363ffffffff1660e01b81526004016113b49291906127a7565b602060405180830381600087803b1580156113ce57600080fd5b505af11580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611406919061256a565b507ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe2358960008151811061144957634e487b7160e01b600052603260045260246000fd5b60200260200101518a848151811061147157634e487b7160e01b600052603260045260246000fd5b6020026020010151898760405161148b9493929190612721565b60405180910390a150505095945050505050565b6000546001600160a01b031690565b606080600060045467ffffffffffffffff8111156114dc57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611505578160200160208202803683370190505b509050600060016004546115199190612f97565b67ffffffffffffffff81111561153f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611568578160200160208202803683370190505b50905060045467ffffffffffffffff81111561159457634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156115bd578160200160208202803683370190505b50935060016004546115cf9190612f97565b67ffffffffffffffff8111156115f557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561161e578160200160208202803683370190505b5092508660005b89821461179257600454811061164d5760405162461bcd60e51b81526004016102df90612ae8565b600087838151811061166f57634e487b7160e01b600052603260045260246000fd5b602002602001015190506002838154811061169a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b03168583815181106116d857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505088818151811061171857634e487b7160e01b600052603260045260246000fd5b6020026020010151838151811061173f57634e487b7160e01b600052603260045260246000fd5b602002602001015184838061175390612fd1565b94508151811061177357634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101529150611625565b60028a815481106117b357634e487b7160e01b600052603260045260246000fd5b600091825260208220015487516001600160a01b039091169188916117e857634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015260015b8181116118fa57846118158284612f97565b8151811061183357634e487b7160e01b600052603260045260246000fd5b602002602001015187828151811061185b57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528361187e8284612f97565b8151811061189c57634e487b7160e01b600052603260045260246000fd5b6020026020010151866001836118b29190612f97565b815181106118d057634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152806118f281612fd1565b915050611803565b505050505094509492505050565b611910611f9a565b6001600160a01b031661192161149f565b6001600160a01b0316146119475760405162461bcd60e51b81526004016102df90612a7c565b7fcf5b6c438b64611d8ee0722509d7ad5149d4f779f0b29bc845152f0d89e42e1961197061149f565b60055483604051611983939291906127c0565b60405180910390a1600555565b600060018451116119b35760405162461bcd60e51b81526004016102df90612b56565b600184516119c19190612f97565b8351146119e05760405162461bcd60e51b81526004016102df906129a0565b508060005b835181108015611a2f575060006001600160a01b0316848281518110611a1b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b15611b3c57838181518110611a5457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663c515ee23868381518110611a8a57634e487b7160e01b600052603260045260246000fd5b60200260200101518784611a9d90612fd1565b94508481518110611abe57634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518463ffffffff1660e01b8152600401611ae5939291906126fd565b60206040518083038186803b158015611afd57600080fd5b505afa158015611b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3591906125a2565b91506119e5565b509392505050565b611b4c611f9a565b6001600160a01b0316611b5d61149f565b6001600160a01b031614611b835760405162461bcd60e51b81526004016102df90612a7c565b60005b600254811015611c0057816001600160a01b031660028281548110611bbb57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415611bee5760405162461bcd60e51b81526004016102df90612b1f565b80611bf881612fd1565b915050611b86565b506002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384161790556004805491611c7183612fd1565b91905055507f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a481604051611ca591906126e9565b60405180910390a150565b611cb8611f9a565b6001600160a01b0316611cc961149f565b6001600160a01b031614611cef5760405162461bcd60e51b81526004016102df90612a7c565b60005b600454811015611e5d57600060028281548110611d1f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031690508063a9059cbb611d4461149f565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038516906370a0823190611d899030906004016126e9565b60206040518083038186803b158015611da157600080fd5b505afa158015611db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd991906125a2565b6040518363ffffffff1660e01b8152600401611df69291906127a7565b602060405180830381600087803b158015611e1057600080fd5b505af1158015611e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e48919061256a565b50508080611e5590612fd1565b915050611cf2565b507fc708bc9126baf78945ae1d05c03aa332ca0460db0e59169024d96f0188f411d1611e8761149f565b604051611e9491906126e9565b60405180910390a1565b611ea6611f9a565b6001600160a01b0316611eb761149f565b6001600160a01b031614611edd5760405162461bcd60e51b81526004016102df90612a7c565b6001600160a01b038116611f035760405162461bcd60e51b81526004016102df9061290c565b611f0c81612101565b50565b6000805b600454811015611f7c57826001600160a01b031660028281548110611f4857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415611f6a579050611f95565b80611f7481612fd1565b915050611f13565b5060405162461bcd60e51b81526004016102df90612ab1565b919050565b3390565b6000808211611fbf5760405162461bcd60e51b81526004016102df906129d7565b816000611fcb82612169565b905060808160ff161115611ff157611fe4608082612fae565b60ff1682901c9150612011565b60808160ff16101561201157612008816080612fae565b60ff1682901b91505b6fffffffffffffffffffffffffffffffff9190911690600060806120388160ff8516612f23565b901b90506f8000000000000000000000000000000060005b60808160ff161080156120635750600085115b156120f65760806f800000000000000000000000000000006120858780612f04565b61208f9190612cd8565b61209e911c600187901b612cd8565b94506fffffffffffffffffffffffffffffffff8511156120dd57918117916120da6f80000000000000000000000000000000600187901c612f97565b94505b60019190911d90806120ee81612fec565b915050612050565b509095945050505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080821161217757600080fd5b5060008170010000000000000000000000000000000081106121a657608090811c906121a39083612cf0565b91505b6801000000000000000081106121c957604090811c906121c69083612cf0565b91505b64010000000081106121e857602090811c906121e59083612cf0565b91505b62010000811061220557601090811c906122029083612cf0565b91505b610100811061222157600890811c9061221e9083612cf0565b91505b6010811061223c57600490811c906122399083612cf0565b91505b6004811061225757600290811c906122549083612cf0565b91505b6002811061226d5761226a600183612cf0565b91505b50919050565b80356001600160a01b0381168114611f9557600080fd5b600082601f83011261229a578081fd5b813560206122af6122aa83612c40565b612c16565b82815281810190858301838502870184018810156122cb578586fd5b855b858110156122f0576122de82612273565b845292840192908401906001016122cd565b5090979650505050505050565b600082601f83011261230d578081fd5b8135602061231d6122aa83612c40565b8281528181019085830183850287018401881015612339578586fd5b855b858110156122f05781358452928401929084019060010161233b565b600060208284031215612368578081fd5b61237182612273565b9392505050565b60008060006060848603121561238c578182fd5b61239584612273565b92506123a360208501612273565b9150604084013590509250925092565b600080600080600060a086880312156123ca578081fd5b6123d386612273565b94506123e160208701612273565b935060408601359250606086013591506123fd60808701612273565b90509295509295909350565b60008060006040848603121561241d578283fd5b61242684612273565b9250602084013567ffffffffffffffff80821115612442578384fd5b818601915086601f830112612455578384fd5b813581811115612463578485fd5b876020828501011115612474578485fd5b6020830194508093505050509250925092565b60008060006060848603121561249b578283fd5b833567ffffffffffffffff808211156124b2578485fd5b6124be8783880161228a565b945060208601359150808211156124d3578384fd5b506124e08682870161228a565b925050604084013590509250925092565b600080600080600060a08688031215612508578081fd5b853567ffffffffffffffff8082111561251f578283fd5b61252b89838a0161228a565b96506020880135915080821115612540578283fd5b5061254d8882890161228a565b94505060408601359250606086013591506123fd60808701612273565b60006020828403121561257b578081fd5b81518015158114612371578182fd5b60006020828403121561259b578081fd5b5035919050565b6000602082840312156125b3578081fd5b5051919050565b600080600080608085870312156125cf578182fd5b843593506020808601359350604086013567ffffffffffffffff808211156125f5578485fd5b818801915088601f830112612608578485fd5b81356126166122aa82612c40565b81815284810190848601885b8481101561264b576126398e8984358a010161228a565b84529287019290870190600101612622565b509097505050506060880135925080831115612665578384fd5b5050612673878288016122fd565b91505092959194509250565b600060208284031215612690578081fd5b815160ff81168114612371578182fd5b6000815180845260208085019450808401835b838110156126d85781516001600160a01b0316875295820195908201906001016126b3565b509495945050505050565b15159052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b60006001600160a01b03851682526040602083015282604083015282846060840137818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6000604082526127f460408301856126a0565b828103602084015261280681856126a0565b95945050505050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b83811015612882577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808884030185526128708383516126a0565b94860194925090850190600101612836565b505085810384870152875180825290840192509050868301845b828110156128b85781518452928401929084019060010161289c565b50505080925050506128cd60408301846126e3565b949350505050565b60208082526015908201527f536c6970706167652077617320746f6f20686967680000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f5472616e73666572206661696c65640000000000000000000000000000000000604082015260600190565b6020808252601e908201527f45786368616e6765207061746820696e636f7272656374206c656e6774680000604082015260600190565b60208082526019908201527f4d757374206265206120706f736974697665206e756d62657200000000000000604082015260600190565b60208082526019908201527f4445582068617320616c72656164206265656e20616464656400000000000000604082015260600190565b6020808252600f908201527f417070726f76616c206661696c65640000000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526013908201527f546f6b656e206e6f7420737570706f7274656400000000000000000000000000604082015260600190565b6020808252600e908201527f4e6f207061746820657869737473000000000000000000000000000000000000604082015260600190565b60208082526013908201527f546f6b656e20616c726561647920616464656400000000000000000000000000604082015260600190565b60208082526024908201527f50617468206d75737420636f6e7461696e2061746c656173742074776f20746f60408201527f6b656e7300000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b600084825260606020830152612bec60608301856126a0565b8281036040840152612bfe81856126a0565b9695505050505050565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715612c3857612c38613022565b604052919050565b600067ffffffffffffffff821115612c5a57612c5a613022565b5060209081020190565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615612c9e57612c9e61300c565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615612cd257612cd261300c565b50500190565b60008219821115612ceb57612ceb61300c565b500190565b600060ff821660ff84168060ff03821115612d0d57612d0d61300c565b019392505050565b600082612d3057634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611612d475750612d72565b818704821115612d5957612d5961300c565b80861615612d6657918102915b9490941c938002612d38565b94509492505050565b600061237160001960ff851684600082612d9757506001612371565b81612da457506000612371565b8160018114612dba5760028114612dc457612df1565b6001915050612371565b60ff841115612dd557612dd561300c565b6001841b915084821115612deb57612deb61300c565b50612371565b5060208310610133831016604e8410600b8410161715612e24575081810a83811115612e1f57612e1f61300c565b612371565b612e318484846001612d35565b808604821115612e4357612e4361300c565b02949350505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81841382841385830485118282161615612e8b57612e8b61300c565b7f800000000000000000000000000000000000000000000000000000000000000084871286820588128184161615612ec557612ec561300c565b858712925087820587128484161615612ee057612ee061300c565b87850587128184161615612ef657612ef661300c565b505050929093029392505050565b6000816000190483118215151615612f1e57612f1e61300c565b500290565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615612f5d57612f5d61300c565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615612f9157612f9161300c565b50500390565b600082821015612fa957612fa961300c565b500390565b600060ff821660ff841680821015612fc857612fc861300c565b90039392505050565b6000600019821415612fe557612fe561300c565b5060010190565b600060ff821660ff8114156130035761300361300c565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220129a9f24cf80d027c48db1d788a3209d97878bac137bc0f3536767848721680064736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063c7b6deca11610066578063c7b6deca146101f6578063d48bfca714610209578063db8d55f11461021c578063f2fde38b14610224576100ea565b80638da5cb5b146101ad5780638f84e6d7146101c25780639012c4a8146101e3576100ea565b8063619a0d62116100c8578063619a0d621461014f5780636e9105e414610171578063715018a61461019257806372799c0c1461019a576100ea565b8063089941cf146100ef57806308d1aa631461011a5780635ed8bda51461012f575b600080fd5b6101026100fd366004612378565b610237565b60405161011193929190612bd3565b60405180910390f35b61012d610128366004612409565b6102a0565b005b61014261013d3660046123b3565b6103fc565b6040516101119190612bb3565b61016261015d36600461258a565b610458565b6040516101119392919061280f565b61018461017f366004612378565b610c6a565b604051610111929190612bbc565b61012d610e4b565b6101426101a83660046124f1565b610e96565b6101b561149f565b60405161011191906126e9565b6101d56101d03660046125ba565b6114ae565b6040516101119291906127e1565b61012d6101f136600461258a565b611908565b610142610204366004612487565b611990565b61012d610217366004612357565b611b44565b61012d611cb0565b61012d610232366004612357565b611e9e565b6000606080600061024787611f0f565b9050600061025487611f0f565b9050600080600061026485610458565b925092509250600080610279878787876114ae565b9150915081985080975061028e89898d611990565b99505050505050505093509350939050565b6102a8611f9a565b6001600160a01b03166102b961149f565b6001600160a01b0316146102e85760405162461bcd60e51b81526004016102df90612a7c565b60405180910390fd5b6001600160a01b03831660009081526003602052604090205460ff16156103215760405162461bcd60e51b81526004016102df90612a0e565b6001600160a01b03831660008181526003602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558054808201825592527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690910180547fffffffffffffffffffffffff000000000000000000000000000000000000000016909217909155517f7b1869d3ff2bcab15b83cbc59ad58cfce8f9cbd573b3c6c58cc888fea1c39f93906103ef9085908590859061274a565b60405180910390a1505050565b60008061040887611f0f565b9050600061041587611f0f565b905060008061042384610458565b5091509150600080610437868686866114ae565b9150915061044882828c8c8c610e96565b9c9b505050505050505050505050565b60608060008060045467ffffffffffffffff81111561048757634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156104ba57816020015b60608152602001906001900390816104a55790505b509050600060045467ffffffffffffffff8111156104e857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610511578160200160208202803683370190505b50905060045467ffffffffffffffff81111561053d57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561057057816020015b606081526020019060019003908161055b5790505b50945060045467ffffffffffffffff81111561059c57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156105c5578160200160208202803683370190505b50935060005b6004548110156109d5577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82828151811061061657634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060045467ffffffffffffffff81111561064b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610674578160200160208202803683370190505b5083828151811061069557634e487b7160e01b600052603260045260246000fd5b602002602001018190525060045467ffffffffffffffff8111156106c957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106f2578160200160208202803683370190505b5086828151811061071357634e487b7160e01b600052603260045260246000fd5b60200260200101819052508681141561075557600082828151811061074857634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b60006002828154811061077857634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169450849263313ce56792600480840193829003018186803b1580156107de57600080fd5b505afa1580156107f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610816919061267f565b61082190600a612d7b565b905060005b6004548110156109bf576000806108b16002878154811061085757634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600280546001600160a01b03909216918690811061089157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031661017f876064612f04565b91509150808b87815181106108d657634e487b7160e01b600052603260045260246000fd5b602002602001015184815181106108fd57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015281156109355761092482611f9e565b61093090600019612e4c565b610957565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b88878151811061097757634e487b7160e01b600052603260045260246000fd5b6020026020010151848151811061099e57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050505080806109b790612fd1565b915050610826565b50505080806109cd90612fd1565b9150506105cb565b50600060015b600454821080156109e95750805b15610c5f57506000816109fb81612fd1565b92505060005b600454811015610c4b576000848281518110610a2d57634e487b7160e01b600052603260045260246000fd5b602002602001015190507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610c385760005b600454811015610c36577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff878481518110610aac57634e487b7160e01b600052603260045260246000fd5b60200260200101518281518110610ad357634e487b7160e01b600052603260045260246000fd5b6020026020010151128015610b675750858181518110610b0357634e487b7160e01b600052603260045260246000fd5b6020026020010151878481518110610b2b57634e487b7160e01b600052603260045260246000fd5b60200260200101518281518110610b5257634e487b7160e01b600052603260045260246000fd5b602002602001015183610b659190612c64565b125b15610c2457868381518110610b8c57634e487b7160e01b600052603260045260246000fd5b60200260200101518181518110610bb357634e487b7160e01b600052603260045260246000fd5b602002602001015182610bc69190612c64565b868281518110610be657634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506001935082898281518110610c1757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b80610c2e81612fd1565b915050610a61565b505b5080610c4381612fd1565b915050610a01565b50600454821415610c5a578094505b6109db565b505050509193909250565b6000806000805b600154811015610d9d57600060018281548110610c9e57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517fc515ee230000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c515ee2390610cf4908b908b908b906004016126fd565b60206040518083038186803b158015610d0c57600080fd5b505afa158015610d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4491906125a2565b905082811115610d8a5780925060018281548110610d7257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031693505b5080610d9581612fd1565b915050610c71565b506040517fed72480400000000000000000000000000000000000000000000000000000000815273__$d6e5c99d87b2345c74da754aa234a52975$__9063ed72480490610df09087908590600401612c08565b60206040518083038186803b158015610e0857600080fd5b505af4158015610e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4091906125a2565b925050935093915050565b610e53611f9a565b6001600160a01b0316610e6461149f565b6001600160a01b031614610e8a5760405162461bcd60e51b81526004016102df90612a7c565b610e946000612101565b565b60006001865111610eb95760405162461bcd60e51b81526004016102df90612b56565b60018651610ec79190612f97565b855114610ee65760405162461bcd60e51b81526004016102df906129a0565b600086600081518110610f0957634e487b7160e01b600052603260045260246000fd5b60200260200101519050806001600160a01b03166323b872dd3330886040518463ffffffff1660e01b8152600401610f43939291906126fd565b602060405180830381600087803b158015610f5d57600080fd5b505af1158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f95919061256a565b610fb15760405162461bcd60e51b81526004016102df90612969565b84915060005b865181108015611001575060006001600160a01b0316878281518110610fed57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b1561131457600087828151811061102857634e487b7160e01b600052603260045260246000fd5b6020026020010151905088828151811061105257634e487b7160e01b600052603260045260246000fd5b602002602001015192506000898361106990612fd1565b9350838151811061108a57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016110c291906126e9565b60206040518083038186803b1580156110da57600080fd5b505afa1580156110ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111291906125a2565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081529091506001600160a01b0386169063095ea7b39061115c9086908a906004016127a7565b602060405180830381600087803b15801561117657600080fd5b505af115801561118a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ae919061256a565b6111ca5760405162461bcd60e51b81526004016102df90612a45565b6040517ffe0291560000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063fe0291569061121690889086908b90600090600401612721565b602060405180830381600087803b15801561123057600080fd5b505af1158015611244573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126891906125a2565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815281906001600160a01b038416906370a08231906112b09030906004016126e9565b60206040518083038186803b1580156112c857600080fd5b505afa1580156112dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130091906125a2565b61130a9190612f97565b9550505050610fb7565b6000600654600554856113279190612f04565b6113319190612d15565b905061133d8185612f97565b93508584101561135f5760405162461bcd60e51b81526004016102df906128d5565b88828151811061137f57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663a9059cbb86866040518363ffffffff1660e01b81526004016113b49291906127a7565b602060405180830381600087803b1580156113ce57600080fd5b505af11580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611406919061256a565b507ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe2358960008151811061144957634e487b7160e01b600052603260045260246000fd5b60200260200101518a848151811061147157634e487b7160e01b600052603260045260246000fd5b6020026020010151898760405161148b9493929190612721565b60405180910390a150505095945050505050565b6000546001600160a01b031690565b606080600060045467ffffffffffffffff8111156114dc57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611505578160200160208202803683370190505b509050600060016004546115199190612f97565b67ffffffffffffffff81111561153f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611568578160200160208202803683370190505b50905060045467ffffffffffffffff81111561159457634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156115bd578160200160208202803683370190505b50935060016004546115cf9190612f97565b67ffffffffffffffff8111156115f557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561161e578160200160208202803683370190505b5092508660005b89821461179257600454811061164d5760405162461bcd60e51b81526004016102df90612ae8565b600087838151811061166f57634e487b7160e01b600052603260045260246000fd5b602002602001015190506002838154811061169a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b03168583815181106116d857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505088818151811061171857634e487b7160e01b600052603260045260246000fd5b6020026020010151838151811061173f57634e487b7160e01b600052603260045260246000fd5b602002602001015184838061175390612fd1565b94508151811061177357634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101529150611625565b60028a815481106117b357634e487b7160e01b600052603260045260246000fd5b600091825260208220015487516001600160a01b039091169188916117e857634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015260015b8181116118fa57846118158284612f97565b8151811061183357634e487b7160e01b600052603260045260246000fd5b602002602001015187828151811061185b57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528361187e8284612f97565b8151811061189c57634e487b7160e01b600052603260045260246000fd5b6020026020010151866001836118b29190612f97565b815181106118d057634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152806118f281612fd1565b915050611803565b505050505094509492505050565b611910611f9a565b6001600160a01b031661192161149f565b6001600160a01b0316146119475760405162461bcd60e51b81526004016102df90612a7c565b7fcf5b6c438b64611d8ee0722509d7ad5149d4f779f0b29bc845152f0d89e42e1961197061149f565b60055483604051611983939291906127c0565b60405180910390a1600555565b600060018451116119b35760405162461bcd60e51b81526004016102df90612b56565b600184516119c19190612f97565b8351146119e05760405162461bcd60e51b81526004016102df906129a0565b508060005b835181108015611a2f575060006001600160a01b0316848281518110611a1b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b15611b3c57838181518110611a5457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663c515ee23868381518110611a8a57634e487b7160e01b600052603260045260246000fd5b60200260200101518784611a9d90612fd1565b94508481518110611abe57634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518463ffffffff1660e01b8152600401611ae5939291906126fd565b60206040518083038186803b158015611afd57600080fd5b505afa158015611b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3591906125a2565b91506119e5565b509392505050565b611b4c611f9a565b6001600160a01b0316611b5d61149f565b6001600160a01b031614611b835760405162461bcd60e51b81526004016102df90612a7c565b60005b600254811015611c0057816001600160a01b031660028281548110611bbb57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415611bee5760405162461bcd60e51b81526004016102df90612b1f565b80611bf881612fd1565b915050611b86565b506002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384161790556004805491611c7183612fd1565b91905055507f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a481604051611ca591906126e9565b60405180910390a150565b611cb8611f9a565b6001600160a01b0316611cc961149f565b6001600160a01b031614611cef5760405162461bcd60e51b81526004016102df90612a7c565b60005b600454811015611e5d57600060028281548110611d1f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031690508063a9059cbb611d4461149f565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038516906370a0823190611d899030906004016126e9565b60206040518083038186803b158015611da157600080fd5b505afa158015611db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd991906125a2565b6040518363ffffffff1660e01b8152600401611df69291906127a7565b602060405180830381600087803b158015611e1057600080fd5b505af1158015611e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e48919061256a565b50508080611e5590612fd1565b915050611cf2565b507fc708bc9126baf78945ae1d05c03aa332ca0460db0e59169024d96f0188f411d1611e8761149f565b604051611e9491906126e9565b60405180910390a1565b611ea6611f9a565b6001600160a01b0316611eb761149f565b6001600160a01b031614611edd5760405162461bcd60e51b81526004016102df90612a7c565b6001600160a01b038116611f035760405162461bcd60e51b81526004016102df9061290c565b611f0c81612101565b50565b6000805b600454811015611f7c57826001600160a01b031660028281548110611f4857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415611f6a579050611f95565b80611f7481612fd1565b915050611f13565b5060405162461bcd60e51b81526004016102df90612ab1565b919050565b3390565b6000808211611fbf5760405162461bcd60e51b81526004016102df906129d7565b816000611fcb82612169565b905060808160ff161115611ff157611fe4608082612fae565b60ff1682901c9150612011565b60808160ff16101561201157612008816080612fae565b60ff1682901b91505b6fffffffffffffffffffffffffffffffff9190911690600060806120388160ff8516612f23565b901b90506f8000000000000000000000000000000060005b60808160ff161080156120635750600085115b156120f65760806f800000000000000000000000000000006120858780612f04565b61208f9190612cd8565b61209e911c600187901b612cd8565b94506fffffffffffffffffffffffffffffffff8511156120dd57918117916120da6f80000000000000000000000000000000600187901c612f97565b94505b60019190911d90806120ee81612fec565b915050612050565b509095945050505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080821161217757600080fd5b5060008170010000000000000000000000000000000081106121a657608090811c906121a39083612cf0565b91505b6801000000000000000081106121c957604090811c906121c69083612cf0565b91505b64010000000081106121e857602090811c906121e59083612cf0565b91505b62010000811061220557601090811c906122029083612cf0565b91505b610100811061222157600890811c9061221e9083612cf0565b91505b6010811061223c57600490811c906122399083612cf0565b91505b6004811061225757600290811c906122549083612cf0565b91505b6002811061226d5761226a600183612cf0565b91505b50919050565b80356001600160a01b0381168114611f9557600080fd5b600082601f83011261229a578081fd5b813560206122af6122aa83612c40565b612c16565b82815281810190858301838502870184018810156122cb578586fd5b855b858110156122f0576122de82612273565b845292840192908401906001016122cd565b5090979650505050505050565b600082601f83011261230d578081fd5b8135602061231d6122aa83612c40565b8281528181019085830183850287018401881015612339578586fd5b855b858110156122f05781358452928401929084019060010161233b565b600060208284031215612368578081fd5b61237182612273565b9392505050565b60008060006060848603121561238c578182fd5b61239584612273565b92506123a360208501612273565b9150604084013590509250925092565b600080600080600060a086880312156123ca578081fd5b6123d386612273565b94506123e160208701612273565b935060408601359250606086013591506123fd60808701612273565b90509295509295909350565b60008060006040848603121561241d578283fd5b61242684612273565b9250602084013567ffffffffffffffff80821115612442578384fd5b818601915086601f830112612455578384fd5b813581811115612463578485fd5b876020828501011115612474578485fd5b6020830194508093505050509250925092565b60008060006060848603121561249b578283fd5b833567ffffffffffffffff808211156124b2578485fd5b6124be8783880161228a565b945060208601359150808211156124d3578384fd5b506124e08682870161228a565b925050604084013590509250925092565b600080600080600060a08688031215612508578081fd5b853567ffffffffffffffff8082111561251f578283fd5b61252b89838a0161228a565b96506020880135915080821115612540578283fd5b5061254d8882890161228a565b94505060408601359250606086013591506123fd60808701612273565b60006020828403121561257b578081fd5b81518015158114612371578182fd5b60006020828403121561259b578081fd5b5035919050565b6000602082840312156125b3578081fd5b5051919050565b600080600080608085870312156125cf578182fd5b843593506020808601359350604086013567ffffffffffffffff808211156125f5578485fd5b818801915088601f830112612608578485fd5b81356126166122aa82612c40565b81815284810190848601885b8481101561264b576126398e8984358a010161228a565b84529287019290870190600101612622565b509097505050506060880135925080831115612665578384fd5b5050612673878288016122fd565b91505092959194509250565b600060208284031215612690578081fd5b815160ff81168114612371578182fd5b6000815180845260208085019450808401835b838110156126d85781516001600160a01b0316875295820195908201906001016126b3565b509495945050505050565b15159052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b60006001600160a01b03851682526040602083015282604083015282846060840137818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6000604082526127f460408301856126a0565b828103602084015261280681856126a0565b95945050505050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b83811015612882577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808884030185526128708383516126a0565b94860194925090850190600101612836565b505085810384870152875180825290840192509050868301845b828110156128b85781518452928401929084019060010161289c565b50505080925050506128cd60408301846126e3565b949350505050565b60208082526015908201527f536c6970706167652077617320746f6f20686967680000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f5472616e73666572206661696c65640000000000000000000000000000000000604082015260600190565b6020808252601e908201527f45786368616e6765207061746820696e636f7272656374206c656e6774680000604082015260600190565b60208082526019908201527f4d757374206265206120706f736974697665206e756d62657200000000000000604082015260600190565b60208082526019908201527f4445582068617320616c72656164206265656e20616464656400000000000000604082015260600190565b6020808252600f908201527f417070726f76616c206661696c65640000000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526013908201527f546f6b656e206e6f7420737570706f7274656400000000000000000000000000604082015260600190565b6020808252600e908201527f4e6f207061746820657869737473000000000000000000000000000000000000604082015260600190565b60208082526013908201527f546f6b656e20616c726561647920616464656400000000000000000000000000604082015260600190565b60208082526024908201527f50617468206d75737420636f6e7461696e2061746c656173742074776f20746f60408201527f6b656e7300000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b600084825260606020830152612bec60608301856126a0565b8281036040840152612bfe81856126a0565b9695505050505050565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715612c3857612c38613022565b604052919050565b600067ffffffffffffffff821115612c5a57612c5a613022565b5060209081020190565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615612c9e57612c9e61300c565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615612cd257612cd261300c565b50500190565b60008219821115612ceb57612ceb61300c565b500190565b600060ff821660ff84168060ff03821115612d0d57612d0d61300c565b019392505050565b600082612d3057634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611612d475750612d72565b818704821115612d5957612d5961300c565b80861615612d6657918102915b9490941c938002612d38565b94509492505050565b600061237160001960ff851684600082612d9757506001612371565b81612da457506000612371565b8160018114612dba5760028114612dc457612df1565b6001915050612371565b60ff841115612dd557612dd561300c565b6001841b915084821115612deb57612deb61300c565b50612371565b5060208310610133831016604e8410600b8410161715612e24575081810a83811115612e1f57612e1f61300c565b612371565b612e318484846001612d35565b808604821115612e4357612e4361300c565b02949350505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81841382841385830485118282161615612e8b57612e8b61300c565b7f800000000000000000000000000000000000000000000000000000000000000084871286820588128184161615612ec557612ec561300c565b858712925087820587128484161615612ee057612ee061300c565b87850587128184161615612ef657612ef661300c565b505050929093029392505050565b6000816000190483118215151615612f1e57612f1e61300c565b500290565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615612f5d57612f5d61300c565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615612f9157612f9161300c565b50500390565b600082821015612fa957612fa961300c565b500390565b600060ff821660ff841680821015612fc857612fc861300c565b90039392505050565b6000600019821415612fe557612fe561300c565b5060010190565b600060ff821660ff8114156130035761300361300c565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220129a9f24cf80d027c48db1d788a3209d97878bac137bc0f3536767848721680064736f6c63430008000033",
  "libraries": {
    "OpenMath": "0xB870ACfCeab32d7Ed7AfFb71F3dbcAaEc3B9C3Bc"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Minima.sol:Minima",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1553,
        "contract": "contracts/Minima.sol:Minima",
        "label": "dexs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1556,
        "contract": "contracts/Minima.sol:Minima",
        "label": "supportedTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1560,
        "contract": "contracts/Minima.sol:Minima",
        "label": "dexKnown",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1562,
        "contract": "contracts/Minima.sol:Minima",
        "label": "numTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1570,
        "contract": "contracts/Minima.sol:Minima",
        "label": "fee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1575,
        "contract": "contracts/Minima.sol:Minima",
        "label": "FEE_DENOM",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}